<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>loml717</title>
        <link>https://loml717.github.io/</link>
        <description>Recent content on loml717</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>loml717</copyright>
        <lastBuildDate>Thu, 17 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://loml717.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Anaconda使用</title>
        <link>https://loml717.github.io/p/anaconda%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>https://loml717.github.io/p/anaconda%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;h1 id=&#34;anaconda使用&#34;&gt;Anaconda使用
&lt;/h1&gt;&lt;h2 id=&#34;创建环境&#34;&gt;创建环境
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;创建虚拟环境：&lt;/strong&gt;&lt;code&gt;conda create --prefix 路径\虚拟环境名称 python=指定版本号&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如：&lt;code&gt;conda create --prefix D:\python3-10-6 python=3.10.6&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看环境：&lt;code&gt;conda env list&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;激活环境：&lt;code&gt;conda activate 路径\虚拟环境名称&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;退出环境：&lt;code&gt;conda deactivate&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除环境：&lt;code&gt;conda env remove -p 路径\虚拟环境名称&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;模块&#34;&gt;模块
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;查找模块：&lt;code&gt;conda search 模块名&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下载模块：&lt;code&gt;conda install 模块名&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看已下载模块：&lt;code&gt;conda list&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新模块：&lt;code&gt;conda upgrade 模块名&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除模块：&lt;code&gt;conda remove 模块名&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;批量导出模块：&lt;code&gt;conda list -e &amp;gt; requirements.txt&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;批量下载模块：&lt;code&gt;conda install --yes --file requirements.txt&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;pycharm中使用conda虚拟环境&#34;&gt;Pycharm中使用conda虚拟环境
&lt;/h2&gt;&lt;p&gt;按如下步骤：&lt;/p&gt;
&lt;img src=&#34;1.jpg&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;img src=&#34;2.jpg&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;img src=&#34;3.jpg&#34; style=&#34;zoom:80%;&#34; /&gt;
</description>
        </item>
        <item>
        <title>Python虚拟环境管理</title>
        <link>https://loml717.github.io/p/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</link>
        <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>https://loml717.github.io/p/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</guid>
        <description>&lt;img src="https://loml717.github.io/p/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/python_virtual_enviroment.png" alt="Featured image of post Python虚拟环境管理" /&gt;&lt;h1 id=&#34;python虚拟环境管理&#34;&gt;Python虚拟环境管理
&lt;/h1&gt;&lt;h2 id=&#34;什么是虚拟环境&#34;&gt;什么是虚拟环境
&lt;/h2&gt;&lt;img src=&#34;环境与虚拟环境.png&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;python环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lib 用于放置 python 可调用的库，其中包含标准库和 site-pakages。site-pakages 用于存放下载的第三方库。&lt;/li&gt;
&lt;li&gt;Scripts 用于存放可执行文件&lt;/li&gt;
&lt;li&gt;python.exe 即为 python 解释器，用于运行 py 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟环境&lt;/p&gt;
&lt;p&gt;虚拟环境实际上就是 python 文件夹的复制品，但与原环境有 3 点不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准库不再被复制，直接调用原环境的标准库。site-pakages 文件夹里为空。&lt;/li&gt;
&lt;li&gt;虚拟环境应该有自己的名称&lt;/li&gt;
&lt;li&gt;python.exe 被移到到 Scripts 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;venv-基本使用&#34;&gt;venv 基本使用
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;创建名为 venvdemo 的虚拟环境：&lt;/strong&gt;&lt;code&gt;python -m venv venvdemo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;**启动虚拟环境：**切换到文件目录 &lt;code&gt;\venvdemo\Scripts&lt;/code&gt; 下，在 cmd 或 powershell 中输入 &lt;code&gt;activate&lt;/code&gt; 即可激活，此时路径前会出现这样的字样 &lt;code&gt;(venvdemo)&lt;/code&gt; ，说明激活成功&lt;/p&gt;
&lt;h2 id=&#34;保存和复制虚拟环境&#34;&gt;保存和复制虚拟环境
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;输出环境中所包含的所有第三方包：&lt;/strong&gt;&lt;code&gt;pip freeze&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过命令 &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; 将环境的所有包信息保存到文件中，即可完美保存环境&lt;/p&gt;
&lt;p&gt;**恢复环境：**创建好虚拟环境后，将 requirements.txt 文件中的所有包安装至环境即可，&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>软件设计师</title>
        <link>https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</link>
        <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</guid>
        <description>&lt;h1 id=&#34;中级--软件设计师知识点&#34;&gt;中级&amp;ndash;软件设计师（知识点）
&lt;/h1&gt;&lt;h2 id=&#34;知识产权&#34;&gt;知识产权
&lt;/h2&gt;&lt;h3 id=&#34;著作权版权&#34;&gt;著作权（版权）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;人身权
&lt;ul&gt;
&lt;li&gt;发表权（期限：终身+50年）、署名权、修改权、保护作品完整权&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;财产权&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;专利地域性&#34;&gt;专利地域性
&lt;/h3&gt;&lt;p&gt;各国主管机关依照本国法律授予的知识产权，只能在其本国领域内受法律保护（哪里申请，哪里保护）&lt;/p&gt;
&lt;h3 id=&#34;计算机软件著作权&#34;&gt;计算机软件著作权
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;主体与客体&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主体
&lt;ul&gt;
&lt;li&gt;计算机软件著作权的主体指&lt;strong&gt;享有著作权的人&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;根据规定：著作权法（《中华人民共和国著作权法》）、《计算机软件保护条例》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客体
&lt;ul&gt;
&lt;li&gt;计算机软件著作权的主体指&lt;strong&gt;著作权法保护的计算机著作权的范围（受保护的对象）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;计算机程序：源程序和目标程序&lt;/li&gt;
&lt;li&gt;计算机软件的文档：程序设计说明书、流程图和用户手册&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据规定：《著作权法》第三条、《计算机软件保护条例》第二条&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;权利&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人身权
&lt;ul&gt;
&lt;li&gt;发表权、开发者身份权（署名权）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;财产权&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;保护期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机软件著作权的权利自软件开发完成之日起产生，保护期为50年。保护期满，除开发者身份权外，其他权利终止。&lt;/p&gt;
&lt;h3 id=&#34;职务作品&#34;&gt;职务作品
&lt;/h3&gt;&lt;p&gt;职务软件作品指公民在单位任职期间为执行本单位工作任务所开发的计算机软件作品。（开发人员仅享有署名权）&lt;/p&gt;
&lt;p&gt;若开发的软件不是执行本职工作的结果，其著作权不属单位享有。如果该雇员主要使用了单位的设备，著作权不能属于该雇员个人享有。&lt;/p&gt;
&lt;h3 id=&#34;委托开发&#34;&gt;委托开发
&lt;/h3&gt;&lt;p&gt;接受他人委托开发的软件，其著作权的归属由委托者与受委托者签订书面合同约定；无书面合同或者书面合同未作明确约定的，其著作权由受托人享有。&lt;/p&gt;
&lt;h3 id=&#34;商业秘密权&#34;&gt;商业秘密权
&lt;/h3&gt;&lt;p&gt;商业秘密：指不为公众所知悉的，能为权利人带来经济利益、具有实用性并经权利人采取保密措施的技术信息和经营信息。&lt;/p&gt;
&lt;h3 id=&#34;专利权申请&#34;&gt;专利权申请
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;专利申请原则
&lt;ul&gt;
&lt;li&gt;两个或者两个以上的人分别就同样的发明创造申请专利的，&lt;strong&gt;专利权授给最先申请人&lt;/strong&gt;，同一时间则协商。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;商标权&#34;&gt;商标权
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时间性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我国商标权的保护期限自核准注册之日起&lt;strong&gt;10年内有效&lt;/strong&gt;，但可以根据其所有人的需要&lt;strong&gt;无限地延长权利期限&lt;/strong&gt;，在期限届满前6个月内申请续展注册，每次续展注册的有效期为10年&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;商标注册&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先注册先得，同一时间，先使用先得，未使用协商。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向对象技术&#34;&gt;面向对象技术
&lt;/h2&gt;&lt;h3 id=&#34;类&#34;&gt;类
&lt;/h3&gt;&lt;p&gt;一个类所包含的方法和数据描述一组对象的共同行为和属性。&lt;/p&gt;
&lt;p&gt;类是在对象之上的抽像，对象是类的具体化，是类的实例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类分为三种
&lt;ul&gt;
&lt;li&gt;实体类
&lt;ul&gt;
&lt;li&gt;其对象表示现实世界中真实的实体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口类（边界类）
&lt;ul&gt;
&lt;li&gt;其为用户提供一种与系统合作交互的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制类
&lt;ul&gt;
&lt;li&gt;其用来控制活动流，充当协调者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般类与特殊类
&lt;ul&gt;
&lt;li&gt;一般类为特殊类的父类，特殊类为一般类的子类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对象&#34;&gt;对象
&lt;/h3&gt;&lt;p&gt;对象是基本的运行时的实体，它既包括数据（属性 | 状态），也包括作用与数据的操作（行为 | 方法 | 函数）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个对象通常由对象名、属性和方法 3 个部分组成。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;消息&#34;&gt;消息
&lt;/h3&gt;&lt;p&gt;对象之间进行通信的一种构造叫作消息。&lt;/p&gt;
&lt;p&gt;当一个消息发送给某个对象时，包含要求接收对象去执行某些活动的信息。接收到信息的对象经过解释，然后予以响应。这种通信机制称为消息传递。&lt;/p&gt;
&lt;h3 id=&#34;方法重载&#34;&gt;方法重载
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方法名相同，参数个数不同&lt;/li&gt;
&lt;li&gt;方法名相同，参数类型不同&lt;/li&gt;
&lt;li&gt;方法名相同，参数类型顺序不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装&#34;&gt;封装
&lt;/h3&gt;&lt;p&gt;封装是一种信息隐蔽技术，它的目的是使对象的使用者和生产者分离，使对象的定义和实现分开。&lt;/p&gt;
&lt;h3 id=&#34;继承&#34;&gt;继承
&lt;/h3&gt;&lt;p&gt;继承是父类和子类之间共享数据和方法的机制。&lt;/p&gt;
&lt;p&gt;一个父类可以有多个子类，这些子类都是父类的特例，父类描述类这些子类的公共属性和方法。一个子类可以继承它的父类（或祖先类）中的属性和方法，这些属性和操作在子类中不必定义，子类还可以定义自己的属性和方法。&lt;/p&gt;
&lt;p&gt;单重继承：继承一个父类&lt;/p&gt;
&lt;p&gt;多重继承：继承两个及以上的父类&lt;/p&gt;
&lt;h3 id=&#34;多态&#34;&gt;多态
&lt;/h3&gt;&lt;p&gt;同类的不同的对象收到同一消息可以产生完全不同的结果，这一现象称为多态。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;父类 对象名 =  new 子类&lt;/code&gt; 编译看左边，运行看右边&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多态的不同形式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多态
&lt;ul&gt;
&lt;li&gt;通用的
&lt;ul&gt;
&lt;li&gt;参数：泛型&lt;/li&gt;
&lt;li&gt;包含：父类引用子类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特定的
&lt;ul&gt;
&lt;li&gt;过载：重载方法&lt;/li&gt;
&lt;li&gt;强制：强制类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;静态动态绑定&#34;&gt;静态、动态绑定
&lt;/h3&gt;&lt;p&gt;绑定是一个把过程调用和响应调用所需要执行的代码加以结合的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态绑定：在编译时进行&lt;/li&gt;
&lt;li&gt;动态绑定：在运行时进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面向对象设计原则&#34;&gt;面向对象设计原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单一责任原则&lt;/li&gt;
&lt;li&gt;就一个类而言，应该仅有一个引起它变化的原因&lt;/li&gt;
&lt;li&gt;开放-封闭原则
&lt;ul&gt;
&lt;li&gt;对扩展开放，对修改封闭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;里氏替换原则
&lt;ul&gt;
&lt;li&gt;基类出现的地方，子类必定能出现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依赖倒置原则
&lt;ul&gt;
&lt;li&gt;依赖于抽象，而不依赖于细节（实现）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口分离原则
&lt;ul&gt;
&lt;li&gt;依赖于抽象，而不依赖与具体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共同重用原则
&lt;ul&gt;
&lt;li&gt;重用包中的一个类，就要重用包中的所有类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共同封闭原则
&lt;ul&gt;
&lt;li&gt;一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他的包不造成影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面向对象&#34;&gt;面向对象
&lt;/h3&gt;&lt;h4 id=&#34;分析ooa&#34;&gt;分析（OOA）
&lt;/h4&gt;&lt;p&gt;面向对象分析的目的是为了获得对应用问题的理解。理解的目的是确定系统的功能、性能的要求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5 个活动&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认定对象
&lt;ul&gt;
&lt;li&gt;定义问题域，将自然存在的 ‘名词’ 作为一个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组织对象&lt;/li&gt;
&lt;li&gt;对象间的相互作用&lt;/li&gt;
&lt;li&gt;基于对象的操作&lt;/li&gt;
&lt;li&gt;定义对象的内部信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;设计ood&#34;&gt;设计（OOD）
&lt;/h4&gt;&lt;p&gt;面向对象设计是将 OOA 所创建的分析模型转化为设计模型，其目标是定义系统构造蓝图。&lt;/p&gt;
&lt;p&gt;OOD 在复用 OOA 模型的基础上，包含与 OOA 对应如下五个活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;识别类及对象&lt;/li&gt;
&lt;li&gt;定义属性&lt;/li&gt;
&lt;li&gt;定义服务&lt;/li&gt;
&lt;li&gt;识别关系&lt;/li&gt;
&lt;li&gt;识别包&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;测试&#34;&gt;测试
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;4 个层次&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法层&lt;/li&gt;
&lt;li&gt;类层&lt;/li&gt;
&lt;li&gt;模板层&lt;/li&gt;
&lt;li&gt;系统层&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;补充&#34;&gt;补充
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类的静态方法只能访问该类的静态数据成员&lt;/li&gt;
&lt;li&gt;静态数据成员可以被该类的所有方法访问&lt;/li&gt;
&lt;li&gt;该类的对象共享其静态数据成员的值&lt;/li&gt;
&lt;li&gt;在面向对象技术中，对象具有清晰的边界、良好定义的行为、可扩展性的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;uml&#34;&gt;UML
&lt;/h2&gt;&lt;p&gt;UML 统一建模语言，由 3 个要素构成，UML 的基本构造块、支配这些构造块如何放置在一起的规则、运用与整个语言的一些公共机制。&lt;/p&gt;
&lt;p&gt;UML 的词汇表包含 3 种构造块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事物
&lt;ul&gt;
&lt;li&gt;对模型中最具有代表性的成分的抽象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关系
&lt;ul&gt;
&lt;li&gt;把事物结合在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图
&lt;ul&gt;
&lt;li&gt;聚集了相关的事物&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事物&#34;&gt;事物
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;4 种事物：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构事物（静态部分）
&lt;ul&gt;
&lt;li&gt;类、接口、协作、用例、主动类、构件、制品、结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行为事物（动态部分）
&lt;ul&gt;
&lt;li&gt;交互、状态机、活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分组事物（组织部分）
&lt;ul&gt;
&lt;li&gt;包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释事物（解释部分）
&lt;ul&gt;
&lt;li&gt;注解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关系&#34;&gt;关系
&lt;/h3&gt;&lt;p&gt;4 种关系：依赖、关联、泛化、实现&lt;/p&gt;
&lt;h4 id=&#34;依赖关系&#34;&gt;依赖关系
&lt;/h4&gt;&lt;p&gt;依赖是两个事物之间的语义关系，其中一个事物（独立事物）发生变化会影响另一个事物（依赖事物）的语义。&lt;/p&gt;
&lt;img src=&#34;依赖关系.png&#34; style=&#34;zoom:33%;&#34; /&gt;
&lt;h4 id=&#34;关联关系&#34;&gt;关联关系
&lt;/h4&gt;&lt;p&gt;关联是一种结构关系，它描述了一组链，链是对象之间的连接。聚集是一种特殊类型的关联，它描述了整体和部分间的结构关系。&lt;/p&gt;
&lt;p&gt;在关联上可以&lt;strong&gt;标注重复度（多重度）和角色&lt;/strong&gt;。&lt;/p&gt;
&lt;img src=&#34;关联关系.png&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;聚集：部分和整体的生命周期不一致，整体消失了，部分仍然存在，部分可以脱离整体存在。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;聚集关系.png&#34; style=&#34;zoom:38%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组合：部分和整体的生命周期一致，整体消失了，部分也消失了，部分不可以脱离整体存在。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;组合关系.png&#34; style=&#34;zoom:38%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;关联多重度&#34;&gt;关联多重度
&lt;/h5&gt;&lt;p&gt;多重度是指一个类的实例能够与另一个类的多少个实例相关联&lt;/p&gt;
&lt;h4 id=&#34;泛化关系&#34;&gt;泛化关系
&lt;/h4&gt;&lt;p&gt;泛化是一种特殊/一般关系，特殊元素（子类）的对象可替代一般元素（父类）的对象。&lt;/p&gt;
&lt;img src=&#34;泛化关系.png&#34; style=&#34;zoom:48%;&#34; /&gt;
&lt;h4 id=&#34;实现关系&#34;&gt;实现关系
&lt;/h4&gt;&lt;p&gt;实现是类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约。&lt;/p&gt;
&lt;img src=&#34;实现关系.png&#34; style=&#34;zoom:48%;&#34; /&gt;
&lt;h3 id=&#34;图&#34;&gt;图
&lt;/h3&gt;&lt;p&gt;静态建模：类图、对象图、用例图&lt;/p&gt;
&lt;p&gt;动态建模：序列图、通信图、状态图、活动图&lt;/p&gt;
&lt;p&gt;物理建模：构件图、部署图&lt;/p&gt;
&lt;p&gt;交互图：序列图、通信图&lt;/p&gt;
&lt;h4 id=&#34;类图&#34;&gt;类图
&lt;/h4&gt;&lt;p&gt;类图&lt;strong&gt;展现了一组对象、接口、协作和它们之间的关系&lt;/strong&gt;。 类图一般包括类、接口、协作、依赖、泛化、关联。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%B1%BB%E5%9B%BE.png&#34;
	width=&#34;1786&#34;
	height=&#34;1146&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%B1%BB%E5%9B%BE_hu4822158137995316349.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%B1%BB%E5%9B%BE_hu7061517334284926786.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;3 种方式使用类图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对系统的词汇建模&lt;/li&gt;
&lt;li&gt;对简单的协作建模&lt;/li&gt;
&lt;li&gt;对逻辑数据库模式建模&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对象图&#34;&gt;对象图
&lt;/h4&gt;&lt;p&gt;对象图&lt;strong&gt;展示了某一时刻一组对象以及它们之间的关系&lt;/strong&gt;。对象图一般包括对象、链。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%AF%B9%E8%B1%A1%E5%9B%BE.png&#34;
	width=&#34;1742&#34;
	height=&#34;812&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%AF%B9%E8%B1%A1%E5%9B%BE_hu16123999466799113652.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%AF%B9%E8%B1%A1%E5%9B%BE_hu5013731173708976269.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;214&#34;
		data-flex-basis=&#34;514px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;用例图&#34;&gt;用例图
&lt;/h4&gt;&lt;p&gt;用例图&lt;strong&gt;展现了一组用例、参与者以及它们之间的关系&lt;/strong&gt;。用例图一般包括用例、参与者、用例之间的扩展关系（&amp;laquo;extend&amp;gt;&amp;gt;）和包含关系（&amp;laquo;include&amp;gt;&amp;gt;）、参与者和用例之间的关联关系、用例与用例以及参与者与参与者之间的泛化关系。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;参与者：表示人、硬件或其他系统可以扮演的角色&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;用例：一个类，代表一类功能而不是使用该功能的某一具体实例&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%94%A8%E4%BE%8B%E5%9B%BE.png&#34;
	width=&#34;1808&#34;
	height=&#34;888&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%94%A8%E4%BE%8B%E5%9B%BE_hu14172850264649847686.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%94%A8%E4%BE%8B%E5%9B%BE_hu8420020319490870705.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;203&#34;
		data-flex-basis=&#34;488px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含关系（用例&amp;amp;用例）
&lt;ul&gt;
&lt;li&gt;当某一用例被执行时，其箭头指向的用例（被包含用例）也会被执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;扩展关系（用例&amp;amp;用例）
&lt;ul&gt;
&lt;li&gt;一个用例执行的时候，可能会发生一些特殊的情况或可选的情况，这种情况就是这个用例的扩展用例。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;泛化关系（用例&amp;amp;用例 || 参与者&amp;amp;参与者）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;序列图顺序图&#34;&gt;序列图（顺序图）
&lt;/h4&gt;&lt;p&gt;序列图是场景的图形化表示，&lt;strong&gt;描述了以时间顺序组织的对象之间的交互活动&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序列图有两个不同于通信图的特征：
&lt;ul&gt;
&lt;li&gt;序列图有对象生命线，表示一个对象在一段时间内存在&lt;/li&gt;
&lt;li&gt;序列图有控制焦点（生命线上的矩形），表示一个对象执行一个动作所经历的时间段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%BA%8F%E5%88%97%E5%9B%BE.png&#34;
	width=&#34;1284&#34;
	height=&#34;824&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%BA%8F%E5%88%97%E5%9B%BE_hu11861659648816942721.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%BA%8F%E5%88%97%E5%9B%BE_hu8073227203007898593.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;373px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;通信图协作图&#34;&gt;通信图（协作图）
&lt;/h4&gt;&lt;p&gt;通信图强调收发消息的对象的结构组织，&lt;strong&gt;展示对象之间的消息流及其顺序&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信图有两个不同于序列图的特性
&lt;ul&gt;
&lt;li&gt;通信图有路径&lt;/li&gt;
&lt;li&gt;通信图有顺序号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E9%80%9A%E4%BF%A1%E5%9B%BE.png&#34;
	width=&#34;1466&#34;
	height=&#34;540&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E9%80%9A%E4%BF%A1%E5%9B%BE_hu14047803098663100087.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E9%80%9A%E4%BF%A1%E5%9B%BE_hu11792393454046626026.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;271&#34;
		data-flex-basis=&#34;651px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;序列图和通信图是同构的，它们之间可以相互转换。&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;状态图&#34;&gt;状态图
&lt;/h4&gt;&lt;p&gt;状态图展现了一个状态机，它由状态、转换、事件、活动组成，强调对象（单个）行为的事件顺序，&lt;strong&gt;通常对反应型对象建模&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;状态图用于&lt;strong&gt;描述一个对象在多个用例中的行为，用于某些具有多个状态的对象而不是系统中大多数或全部对象&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;状态转换图.png&#34; style=&#34;zoom:48%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活动
&lt;ul&gt;
&lt;li&gt;活动表的语法格式：&lt;code&gt;事件名（参数表）/动作表达式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;活动表.png&#34; style=&#34;zoom:38%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事件
&lt;ul&gt;
&lt;li&gt;事件表达式语法格式：&lt;code&gt;事件说明[监护条件]/动作表达式&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;转换（迁移）
&lt;ul&gt;
&lt;li&gt;转换可以包含事件触发器、监护条件、状态（两个）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;状态图可以没有终止状态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转换包括两个状态（源状态，目标状态）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事件触发转移（迁移）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;活动（动作）可以在状态内执行，也可以在状态转换（迁移）时执行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%8A%B6%E6%80%81%E5%9B%BE.png&#34;
	width=&#34;1764&#34;
	height=&#34;780&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%8A%B6%E6%80%81%E5%9B%BE_hu2331306147413038689.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%8A%B6%E6%80%81%E5%9B%BE_hu4812544430207869862.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;542px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;组合状态也称超状态，嵌套状态也称子状态&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;活动图&#34;&gt;活动图
&lt;/h4&gt;&lt;p&gt;活动图是一种特殊的状态图，它&lt;strong&gt;展现了在系统内从一个活动到另一个活动的流程&lt;/strong&gt;。&lt;/p&gt;
&lt;img src=&#34;活动图.png&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;h4 id=&#34;构件图&#34;&gt;构件图
&lt;/h4&gt;&lt;p&gt;构件图&lt;strong&gt;展现了一组构件之间的组织和依赖&lt;/strong&gt;。通常把构件映射为一个或多个类、接口或协作。&lt;/p&gt;
&lt;img src=&#34;构件图.png&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;h4 id=&#34;部署图&#34;&gt;部署图
&lt;/h4&gt;&lt;p&gt;部署图是用来对面向对象系统的物理方面建模的方法，&lt;strong&gt;展现了系统的软件和硬件之间的关系&lt;/strong&gt;，在实施阶段使用。&lt;/p&gt;
&lt;img src=&#34;部署图.png&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;hr&gt;
&lt;h2 id=&#34;结构化开发&#34;&gt;结构化开发
&lt;/h2&gt;&lt;h3 id=&#34;耦合&#34;&gt;耦合
&lt;/h3&gt;&lt;p&gt;耦合是模块之间的相对独立性（互相连接的紧密程度）的度量。耦合取决于各个模块之间&lt;strong&gt;接口的复杂程度&lt;/strong&gt;、&lt;strong&gt;调用模块的方式&lt;/strong&gt;以及&lt;strong&gt;通过接口的信息类&lt;/strong&gt;型等。一般模块之间可能的耦合方式有 7 种类型：&lt;/p&gt;
&lt;img src=&#34;耦合的种类.png&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;无直接耦合。 指两个模块之间&lt;strong&gt;没有直接的关系&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;数据耦合。指两个模块之间有调用关系， 传递的是&lt;strong&gt;简单的数据值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;标记耦合。指两个模块之间传递的是&lt;strong&gt;数据结构&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;控制耦合。指一个模块调用另一个模块时，传递的是&lt;strong&gt;控制变量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;外部耦合。模块间通过&lt;strong&gt;软件之外的环境联结&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;公共耦合。指&lt;strong&gt;通过一个公共数据环境相互作用&lt;/strong&gt;的那些模块间的耦合。&lt;/li&gt;
&lt;li&gt;内容耦合。当一个模块&lt;strong&gt;直接使用另一个模块的内部数据&lt;/strong&gt;，或&lt;strong&gt;通过非正常入口转入另一个模块内部&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内聚&#34;&gt;内聚
&lt;/h3&gt;&lt;p&gt;内聚是对一个模块内部各个元素彼此结合的紧密程度的度量。一个内聚程度高的模块（在理想情况下）应当只做一件事。一般模块的内聚性分为 7 种类型：&lt;/p&gt;
&lt;img src=&#34;内聚的种类.png&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;偶然内聚（巧合内聚）。指一个模块内的各处理元素之间&lt;strong&gt;没有任何联系&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;逻辑内聚。指模块内执行若干个&lt;strong&gt;逻辑上相似&lt;/strong&gt;的功能。&lt;/li&gt;
&lt;li&gt;时间内聚。 把需要&lt;strong&gt;同时执行&lt;/strong&gt;的动作组合在一起形成的模块。&lt;/li&gt;
&lt;li&gt;过程内聚。指一个模块完成多个任务， 这些任务必须&lt;strong&gt;按指定的过程执行&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;通信内聚。指模块内的所有处理元素都在&lt;strong&gt;同一个数据结构上操作&lt;/strong&gt; ， 或者各处理使用相同的输入数据或者产生相同的输出数据。&lt;/li&gt;
&lt;li&gt;顺序内聚。指一个模块中的各个处理元素都密切相关于同一功能且必须&lt;strong&gt;顺序执行&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;功能内聚。指模块内的&lt;strong&gt;所有元素共同作用完成一个功能&lt;/strong&gt;， 缺一不可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;耦合性和内聚性是模块独立性的两个定性标准， 在将软件系统划分模块时， 应尽量做到高内聚，低耦合， 提高模块的独立性。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;系统结构设计原则&#34;&gt;系统结构设计原则
&lt;/h3&gt;&lt;p&gt;为保证总体结构设计顺利完成， 应遵循以下几条原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分解－协调原则。&lt;/li&gt;
&lt;li&gt;自顶向下的原则。&lt;/li&gt;
&lt;li&gt;信息隐蔽、 抽象的原则。&lt;/li&gt;
&lt;li&gt;一致性原则。&lt;/li&gt;
&lt;li&gt;明确性原则。
&lt;ul&gt;
&lt;li&gt;每个模块必须功能明确、 接口明确， 消除多重功能和无用接口（避免病态连接、降低接口复杂度）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块之间的耦合尽可能小， 模块的内聚度尽可能高。&lt;/li&gt;
&lt;li&gt;模块的扇入系数和扇出系数要合理。
&lt;ul&gt;
&lt;li&gt;一个模块直接调用其他模块的个数称为模块的扇出系数；反之，一个模块被其他模块调用时，直接调用它的模块个数称为模块的扇入系数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块的规模适当&lt;/li&gt;
&lt;li&gt;模块的作用范围应该在其控制范围内&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统文档&#34;&gt;系统文档
&lt;/h3&gt;&lt;p&gt;信息系统的文档是系统建设过程的 ＂痕迹“，是系统维护人员的指南， 是开发人员与用户交流的工具。&lt;/p&gt;
&lt;p&gt;在系统开发人员、 项目管理人员、 系统维护人员、 系统评价人员以及用户之间的沟通文档如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户与系统分析人员
&lt;ul&gt;
&lt;li&gt;可行性研究报告、 总体规划报告、 系统开发合同和系统方案说明书等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统开发人员与项目管理人员
&lt;ul&gt;
&lt;li&gt;系统开发计划（包括工作任务分解表、PERT图、 甘特图和预算分配表等）、 系统开发月报以及系统开发总结报告等项目管理文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统测试人员与系统开发人员
&lt;ul&gt;
&lt;li&gt;系统方案说明书、 系统开发合同、 系统设计说明书和测试计划等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统开发人员与用户
&lt;ul&gt;
&lt;li&gt;用户手册和操作指南。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统开发人员与系统维护人员
&lt;ul&gt;
&lt;li&gt;系统设计说明书 和系统开发总结报告。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户与维修人员
&lt;ul&gt;
&lt;li&gt;系统运行报告和维护修改建议、技术手册。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据流图&#34;&gt;数据流图
&lt;/h3&gt;&lt;h4 id=&#34;基本图形元素&#34;&gt;基本图形元素
&lt;/h4&gt;&lt;p&gt;数据流图中的基本图形元素包括数据流、加工、数据存储和外部实体。&lt;/p&gt;
&lt;img src=&#34;数据流图的基本图形元素.png&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;&lt;em&gt;一个加工可以有多个输入数据流和多个输出数据流，但至少有一个输入数据流和一个输出数据流。&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;数据字典&#34;&gt;数据字典
&lt;/h4&gt;&lt;p&gt;数据字典就是为数据流图中的每个数据流、 文件、 加工 ， 以及组成数据流或文件的数据项做出说明。&lt;/p&gt;
&lt;h5 id=&#34;数据字典内容&#34;&gt;数据字典内容
&lt;/h5&gt;&lt;p&gt;数据字典有以下4类条目： &lt;strong&gt;数据流&lt;/strong&gt;、 &lt;strong&gt;数据项&lt;/strong&gt;、 &lt;strong&gt;数据存储&lt;/strong&gt;和&lt;strong&gt;基本加工&lt;/strong&gt;。 数据项是组成数据流和数据存储的最小元素。 源点、 终点不在系统之内， 故一般不在字典中说明。&lt;/p&gt;
&lt;h5 id=&#34;加工逻辑的描述&#34;&gt;加工逻辑的描述
&lt;/h5&gt;&lt;p&gt;加工逻辑也称为 “ 小说明 “。 常用的加工逻辑描述方法有&lt;strong&gt;结构化语言&lt;/strong&gt;、 &lt;strong&gt;判定表&lt;/strong&gt;和&lt;strong&gt;判定树&lt;/strong&gt; 3 种。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;软件工程&#34;&gt;软件工程
&lt;/h2&gt;&lt;h3 id=&#34;软件过程&#34;&gt;软件过程
&lt;/h3&gt;&lt;h4 id=&#34;能力成熟度模型cmm&#34;&gt;能力成熟度模型（CMM）
&lt;/h4&gt;&lt;p&gt;CMM 将软件过程改进分为以下 5 个成熟度级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始级
&lt;ul&gt;
&lt;li&gt;软件过程的特定是&lt;strong&gt;杂乱无章，有时甚至混乱&lt;/strong&gt;，几乎没有明确定义的步骤，项目的成功完全依赖个人努力和英雄式核心人物的作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可重复级
&lt;ul&gt;
&lt;li&gt;建立了&lt;strong&gt;基本的项目管理过程和实践来跟踪项目费用、进度和功能特性&lt;/strong&gt;，有必要的过程准则来重复以前在同类项目中的成功&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;已定义级
&lt;ul&gt;
&lt;li&gt;软件过程文档化、标准化，并综合成整个软件开发组织的标准软件过程。&lt;strong&gt;所有项目都采用根据实际情况修改后得到的标准软件过程来开发和维护软件&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;已管理级
&lt;ul&gt;
&lt;li&gt;制定了软件过程和产品质量的详细度量标准。&lt;strong&gt;软件过程的产品质量都被开发组织的成员所理解和控制&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优化级
&lt;ul&gt;
&lt;li&gt;加强了定量分析，通过来自&lt;strong&gt;过程质量反馈&lt;/strong&gt;和来自&lt;strong&gt;新观念、新技术的反馈&lt;/strong&gt;使过程能&lt;strong&gt;不断持续地改进&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;能力成熟度模型集成cmmi&#34;&gt;能力成熟度模型集成（CMMI）
&lt;/h4&gt;&lt;p&gt;CMMI提供了两种表示方法：阶段式模型和连续式模型&lt;/p&gt;
&lt;p&gt;1）阶段式模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始的：过程不可预测且缺乏控制&lt;/li&gt;
&lt;li&gt;已管理的：过程为项目服务&lt;/li&gt;
&lt;li&gt;已定义的：过程为组织服务&lt;/li&gt;
&lt;li&gt;定量管理的：过程已度量和控制&lt;/li&gt;
&lt;li&gt;优化的：集中于过程改进&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2）连续式模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CL0（未完成的）
&lt;ul&gt;
&lt;li&gt;过程域&lt;strong&gt;未执行或未得到&lt;/strong&gt; CL1 中定义的所有目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CL1（已执行的）
&lt;ul&gt;
&lt;li&gt;其共性目标是过程&lt;strong&gt;将可标识的输入工作产品转换成可标识的输出工作产品&lt;/strong&gt;，以实现支持过程域的特定目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CL2（已管理的）
&lt;ul&gt;
&lt;li&gt;其共性目标&lt;strong&gt;集中于已管理的过程的制度化&lt;/strong&gt;。根据组织级政策规定过程的运行将使用哪个过程，项目遵循已文档化的计划和过程描述，所有正在工作的人都有权使用足够的资源，所有工作任务和工作产品都被监控、控制和评审。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CL3（已定义级的）
&lt;ul&gt;
&lt;li&gt;其共性目标&lt;strong&gt;集中于已定义的过程的制度化&lt;/strong&gt;。过程是按照组织的剪裁指南从组织的标准过程集中剪裁得到的，还必须收集过程资产和过程的度量，并用于将来对过程的改进。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CL4（定量管理的）
&lt;ul&gt;
&lt;li&gt;其共性目标&lt;strong&gt;集中于可定量管理的过程的制度化&lt;/strong&gt;。使用测量和质量保证来控制和改进过程域，建立和使用关于质量和过程执行的定量目标作为管理准则。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CL5（优化的）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用量化（统计学）手段改变和优化过程域&lt;/strong&gt;，以满足客户要求的改变和持续改进计划中的过程域的功效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件过程模型&#34;&gt;软件过程模型
&lt;/h3&gt;&lt;p&gt;软件过程模型也称为软件开发模型，它是软件开发全部过程、活动和任务的结构框架。&lt;/p&gt;
&lt;h4 id=&#34;瀑布模型&#34;&gt;瀑布模型
&lt;/h4&gt;&lt;p&gt;只适用于需求明确或者二次开发（需求稳定）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;容易理解，管理成本低&lt;/li&gt;
&lt;li&gt;强调开发的阶段性早期计划及需求调查和产品测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;客户必须能够完整、正确、清晰的表达他们的需要&lt;/li&gt;
&lt;li&gt;难以评估进度状态&lt;/li&gt;
&lt;li&gt;接近项目结束时，出现大量的集成和测试工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;瀑布模型.png&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;v模型&#34;&gt;V模型
&lt;/h4&gt;&lt;p&gt;特点是增加了多轮测试。&lt;/p&gt;
&lt;img src=&#34;V模型.png&#34; style=&#34;zoom: 40%;&#34; /&gt;
&lt;h4 id=&#34;增量模型&#34;&gt;增量模型
&lt;/h4&gt;&lt;p&gt;优先级最高的服务最先交付，但由于并不是从系统整体角度规划各个模块，因此不利于模块划分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;瀑布模型的优点&lt;/li&gt;
&lt;li&gt;第一个可交付版本所需成本和时间很少&lt;/li&gt;
&lt;li&gt;开发承担的风险不大&lt;/li&gt;
&lt;li&gt;可减少用户需求的变更&lt;/li&gt;
&lt;li&gt;运行增量投资&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;初始增量可能会造成后来增量的不稳定&lt;/li&gt;
&lt;li&gt;需求不稳定，可能导致一些增量需重新开发&lt;/li&gt;
&lt;li&gt;管理发生的成本、进度和配置的复杂性可能会超出组织的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;增量模型.png&#34; style=&#34;zoom:47%;&#34; /&gt;
&lt;h4 id=&#34;演化模型&#34;&gt;演化模型
&lt;/h4&gt;&lt;p&gt;演化模型是迭代的过程模型，使得软件开发人员能够逐步开发出更完整的软件版本。演化模型特别适用于对软件需求缺乏准确认识的情况。&lt;/p&gt;
&lt;h5 id=&#34;原型模型&#34;&gt;原型模型
&lt;/h5&gt;&lt;p&gt;原型方法比较适合于用户需求不清、需求经常变化的情况。当系统规模不是很大也不太复杂时，采用该方法比较好。&lt;/p&gt;
&lt;img src=&#34;原型模型.png&#34; style=&#34;zoom:60%;&#34; /&gt;
&lt;h5 id=&#34;螺旋模型&#34;&gt;螺旋模型
&lt;/h5&gt;&lt;p&gt;螺旋模型将瀑布模型和演化模型结合起来，加入了风险分析。适用于庞大、复杂且具有高风险的系统。&lt;/p&gt;
&lt;img src=&#34;螺旋模型.png&#34; style=&#34;zoom:48%;&#34; /&gt;
&lt;h4 id=&#34;喷泉模型&#34;&gt;喷泉模型
&lt;/h4&gt;&lt;p&gt;喷泉模型是一种以用户需求为动力，以对象作为驱动的模型，适合于面向对象的开发方法。&lt;/p&gt;
&lt;p&gt;喷泉模型克服了瀑布模型不支持软件重用和多项开发活动集成的局限性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;各个阶段没有明显界线，开发人员可以同步进行，提高软件项目的开发效率，节省开发时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;由于各个开发阶段是重叠的，在开发过程中需要大量的开发人员，不利于项目的管理&lt;/li&gt;
&lt;li&gt;这种模型要求严格管理文档，使得审核难度加大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;喷泉模型.png&#34; style=&#34;zoom:48%;&#34; /&gt;
&lt;h4 id=&#34;统一过程模型up&#34;&gt;统一过程模型（UP）
&lt;/h4&gt;&lt;p&gt;统一过程定义了 4 个技术阶段及其制品&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起始阶段：生命周期目标
&lt;ul&gt;
&lt;li&gt;专注于项目的初创活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;精化阶段：生命周期架构
&lt;ul&gt;
&lt;li&gt;理解了最初的领域范围之后进行需求分析和架构演进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构件阶段：初始运作功能
&lt;ul&gt;
&lt;li&gt;关注系统的构建，产生实现模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移交阶段：产品发布
&lt;ul&gt;
&lt;li&gt;关注于软件提交方面的工作，产生软件增量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;敏捷方法&#34;&gt;敏捷方法
&lt;/h3&gt;&lt;h4 id=&#34;极限编程xp&#34;&gt;极限编程（XP）
&lt;/h4&gt;&lt;p&gt;极限编程由价值观、原则、实践、行为 4 个部分组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 大价值观
&lt;ul&gt;
&lt;li&gt;沟通、简单性、反馈、勇气&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5 个原则
&lt;ul&gt;
&lt;li&gt;快速反馈、简单性假设、逐步修改、提倡更改、优质工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;12 个最佳实践
&lt;ul&gt;
&lt;li&gt;计划游戏（快速制定计划、随着细节不断变化而完善）、小型发布、隐喻（找到合适的比喻传达信息）、简单设计、测试先行、重构、结对编程、集体代码所有制、持续集成、每周工作 40 小时、现场客户、编码标准&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;水晶法&#34;&gt;水晶法
&lt;/h4&gt;&lt;p&gt;水晶法认为每一个不同的项目都需要一套不同的策略、约定和方法论&lt;/p&gt;
&lt;h4 id=&#34;并列争求法&#34;&gt;并列争求法
&lt;/h4&gt;&lt;p&gt;并列争求法使用迭代的方法，其中，把每 30 天一次的迭代称为一个“冲刺”&lt;/p&gt;
&lt;h4 id=&#34;自适应软件开发asd&#34;&gt;自适应软件开发（ASD）
&lt;/h4&gt;&lt;p&gt;ASD 有 6 个基本的原则&lt;/p&gt;
&lt;h4 id=&#34;敏捷统一过程aup&#34;&gt;敏捷统一过程（AUP）
&lt;/h4&gt;&lt;p&gt;敏捷统一过程采用“在大型上连续”以及“在小型上迭代”的原理来构建软件系统。&lt;/p&gt;
&lt;p&gt;每个 AUP 迭代执行以下活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建模&lt;/li&gt;
&lt;li&gt;实现&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;部署&lt;/li&gt;
&lt;li&gt;配置及项目管理&lt;/li&gt;
&lt;li&gt;环境管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件需求&#34;&gt;软件需求
&lt;/h3&gt;&lt;p&gt;12 种需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能需求
&lt;ul&gt;
&lt;li&gt;考虑系统要做什么，何时做，在何时以及如何修改或升级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能需求
&lt;ul&gt;
&lt;li&gt;考虑软件开发的技术性指标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户或人的因素
&lt;ul&gt;
&lt;li&gt;考虑用户的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;环境需求
&lt;ul&gt;
&lt;li&gt;考虑未来软件应用的环境，包括硬件和软件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;界面需求
&lt;ul&gt;
&lt;li&gt;考虑来自其他系统的输入，到其他系统的输出，对数据格式的特殊规定，对数据存储介质的规定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档需求
&lt;ul&gt;
&lt;li&gt;考虑需要哪些文档，文档针对哪些读者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据需求
&lt;ul&gt;
&lt;li&gt;考虑输入、输出数据的格式，接收、发送数据的频率，数据的准确性和精度、维护所需的人力、支撑软件、开发设备等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;资源使用需求
&lt;ul&gt;
&lt;li&gt;考虑软件运行时所需要的数据、其他软件、内存空间等资源；软件开发、维护所需的人力、支撑软件、开发设备等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全保密要求
&lt;ul&gt;
&lt;li&gt;考虑是否需要对访问系统或系统信息加以控制，隔离用户数据的方法，用户程序如何与其他程序和操作系统隔离以及系统备份的要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠性要求
&lt;ul&gt;
&lt;li&gt;考虑系统的可靠性要求，系统是否必须检测和隔离错误；出错后，重启系统允许的时间等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件成本消耗与开发进度需求
&lt;ul&gt;
&lt;li&gt;考虑是否有规定的时间表，软/硬件投资有无限制等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他非功能性要求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统设计&#34;&gt;系统设计
&lt;/h3&gt;&lt;h4 id=&#34;概要设计&#34;&gt;概要设计
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;设计软件系统总体结构
&lt;ul&gt;
&lt;li&gt;将一个复杂的系统按功能划分成模块&lt;/li&gt;
&lt;li&gt;确定每个模块的功能&lt;/li&gt;
&lt;li&gt;确定模块之间的调用关系&lt;/li&gt;
&lt;li&gt;确定模块之间的接口，即模块之间传递的信息&lt;/li&gt;
&lt;li&gt;评价模块结构的质量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据结构及数据库设计&lt;/li&gt;
&lt;li&gt;编写概要设计文档&lt;/li&gt;
&lt;li&gt;评审&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;详细设计&#34;&gt;详细设计
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对每个模块进行详细的算法设计，用某种图形、表格和语言等工具将每个模块处理过程的详细算法描述出来&lt;/li&gt;
&lt;li&gt;对模块内的数据结构进行设计&lt;/li&gt;
&lt;li&gt;对数据库进行物理设计&lt;/li&gt;
&lt;li&gt;其他设计&lt;/li&gt;
&lt;li&gt;编写详细设计说明书&lt;/li&gt;
&lt;li&gt;评审&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统测试&#34;&gt;系统测试
&lt;/h3&gt;&lt;p&gt;系统测试是为了发现错误而执行程序的过程，成功的测试是发现了至今尚未发现的错误的测试&lt;/p&gt;
&lt;p&gt;测试的目的就是希望能以最少的人力和时间发现潜在的各种错误和缺陷&lt;/p&gt;
&lt;p&gt;基本原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应尽早并不断进行测试&lt;/li&gt;
&lt;li&gt;测试工作应该避免由原开发软件的人或小组承担，一方面开发人员往往否认自己的工作，另一方面具有局限性&lt;/li&gt;
&lt;li&gt;在设计测试方案时，不仅要确定输入数据，而且要根据系统功能确定预期输出结果&lt;/li&gt;
&lt;li&gt;在设计测试用例时，不仅要设计有效合理的输入条件，也要包含不合理、失效的输入条件&lt;/li&gt;
&lt;li&gt;在测试程序时，不仅要检查程序是否做了该做的事，还要检验是否做了不该做的事&lt;/li&gt;
&lt;li&gt;严格按照测试计划来进行，避免测试的随意性&lt;/li&gt;
&lt;li&gt;妥善保存测试计划、测试用例，作为软件文档的组成部分，为维护提供方便&lt;/li&gt;
&lt;li&gt;测试例子都是精心设计出来的，可以为重新测试或追加测试提供方便&lt;/li&gt;
&lt;li&gt;系统测试阶段的测试目标来自于需求分析阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单元测试&#34;&gt;单元测试
&lt;/h3&gt;&lt;p&gt;单元测试也称为模块测试，在模块编写完成且无编译错误后就可以进行&lt;/p&gt;
&lt;h4 id=&#34;单元测试的测试内容&#34;&gt;单元测试的测试内容
&lt;/h4&gt;&lt;p&gt;主要检查模块的以下 5 个特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块接口&lt;/li&gt;
&lt;li&gt;局部数据结构&lt;/li&gt;
&lt;li&gt;重要的执行路径&lt;/li&gt;
&lt;li&gt;出错处理&lt;/li&gt;
&lt;li&gt;边界条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;单元测试过程&#34;&gt;单元测试过程
&lt;/h4&gt;&lt;p&gt;由于模块不是独立运行的程序，各模块之间存在调用于被调用的关系。在对每个模块进行测试时，需要开发两种模块。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;驱动模块
&lt;ul&gt;
&lt;li&gt;相当于一个主程序，接收测试例子的数据，将这些数据送到测试模块，输出测试结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;桩模块
&lt;ul&gt;
&lt;li&gt;桩模块用来代替测试模块中所调用的子模块，其内部可进行少量的数据处理，目的是为了检验入口，输出调用和返回信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集成测试&#34;&gt;集成测试
&lt;/h3&gt;&lt;p&gt;集成测试就是把模块按系统设计说明书的要求组合起来进行测试&lt;/p&gt;
&lt;p&gt;集成测试方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自顶向下集成测试（不需要驱动模块，需要桩模块）&lt;/li&gt;
&lt;li&gt;自底向上集成测试（不需要桩模块，需要驱动模块）
&lt;ul&gt;
&lt;li&gt;低层构件集成为簇&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;回归测试&lt;/li&gt;
&lt;li&gt;冒烟测试（知道有就行）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试方法&#34;&gt;测试方法
&lt;/h3&gt;&lt;p&gt;软件测试方法分为静态测试和动态测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态测试
&lt;ul&gt;
&lt;li&gt;静态测试是指被测程序不在机器上运行，而是采用&lt;strong&gt;人工检测&lt;/strong&gt;和&lt;strong&gt;计算机辅助静态分析&lt;/strong&gt;的手段对程序进行检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态测试
&lt;ul&gt;
&lt;li&gt;动态测试是指通过运行程序发现错误。在对软件产品进行动态测试时可以采用黑盒测试法和白盒测试法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;黑盒测试&#34;&gt;黑盒测试
&lt;/h3&gt;&lt;p&gt;黑盒测试也称为功能测试，在完全不考虑软件内部结构和特性的情况下，测试软件的外部特性&lt;/p&gt;
&lt;p&gt;常用黑盒测试技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等价类划分
&lt;ul&gt;
&lt;li&gt;将程序的输入域划分为若干等价类，然后从每个等价类中选取一个代表性数据作为测试用例（等价类分为有效等价类和无效等价类）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;边界值分析
&lt;ul&gt;
&lt;li&gt;边界值划分选择等价类边界的测试用例，既注重于输入条件边界，又适用于输出域测试用例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;错误推测
&lt;ul&gt;
&lt;li&gt;错误推测是基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性地设计测试用例的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因果图
&lt;ul&gt;
&lt;li&gt;因果图法是从自然语言描述的程序规格说明中找出因（输入条件）和果（输出或程序状态的改变），通过因果图转换为判定表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;白盒测试&#34;&gt;白盒测试
&lt;/h3&gt;&lt;p&gt;白盒测试也称为结构测试，根据程序的内部结构和逻辑设计测试用例，对程序的路径和过程进行测试，检查是否满足设计的需要。&lt;/p&gt;
&lt;p&gt;白盒测试常用的技术是逻辑覆盖、 循环覆盖和基本路径测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑覆盖
&lt;ul&gt;
&lt;li&gt;逻辑覆盖考察用测试数据运行被测程序时对程序逻辑的覆盖程度，主要的逻辑覆盖有：
&lt;ul&gt;
&lt;li&gt;语句覆盖：使被测试程序中的每条语句至少执行一次&lt;/li&gt;
&lt;li&gt;判定覆盖（分支覆盖）：使得被测程序中的每个&lt;strong&gt;判定表达式&lt;/strong&gt;至少获得一次 “真 ” 值和 “假 ” 值&lt;/li&gt;
&lt;li&gt;条件覆盖：使得每一判定语句中每个逻辑条件的各种可能的值至少满足一次&lt;/li&gt;
&lt;li&gt;判定／条件覆盖：使得判定中每个条件的所有可能取值（真／假）至少出现一次， 并使每个判定本身的判定结果（真／假）也至少出现一次&lt;/li&gt;
&lt;li&gt;条件组合覆盖：使得每个判定中条件的各种可能值的组合都至少出现一次&lt;/li&gt;
&lt;li&gt;路径覆盖：指覆盖被测试程序中所有可能的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环覆盖
&lt;ul&gt;
&lt;li&gt;执行足够的测试用例， 使得循环中的每个条件都得到验证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本路径测试
&lt;ul&gt;
&lt;li&gt;在程序控制流图的基础上通过分析控制流图的环路复杂性， 导出基本可执行路径集合， 从而设计测试用例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;McCabe度量法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;V(G) = m -n + 2 （V 为复杂度，m 为弧数，n 为结点数）&lt;/p&gt;
&lt;p&gt;或 封闭圈数 + 1&lt;/p&gt;
&lt;h3 id=&#34;软件维护&#34;&gt;软件维护
&lt;/h3&gt;&lt;h4 id=&#34;系统可维护性评价指标&#34;&gt;系统可维护性评价指标
&lt;/h4&gt;&lt;p&gt;系统的可维护性可以定义为维护人员理解、 改正、 改动和改进这个软件的难易程度。&lt;/p&gt;
&lt;p&gt;系统维护主要包括&lt;strong&gt;硬件维护&lt;/strong&gt;、&lt;strong&gt;软件维护&lt;/strong&gt;和&lt;strong&gt;数据维护&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统可维护性的评价指标
&lt;ul&gt;
&lt;li&gt;可理解性&lt;/li&gt;
&lt;li&gt;可修改性&lt;/li&gt;
&lt;li&gt;可测试性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;维护与软件文档
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文档是软件可维护性的决定因素。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可维护性是所有软件都应具有的基本特点， 必须在开发阶段保证软件具有可维护的特点。在软件工程的每一个阶段都应考虑并提高软件的可维护性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;软件文档&#34;&gt;软件文档
&lt;/h4&gt;&lt;p&gt;编写高质量文档可以提高软件开发的质量。&lt;/p&gt;
&lt;p&gt;文档也是软件产品的一部分，没有文档的软件就不能称之为软件。&lt;/p&gt;
&lt;p&gt;软件文档的编制在软件开发工作中占有突出的地位和相当大的工作量。&lt;/p&gt;
&lt;p&gt;高质量文档对于软件产品的效益有着重要的意义&lt;/p&gt;
&lt;p&gt;&lt;em&gt;总之，软件文档只有好处&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;软件维护内容&#34;&gt;软件维护内容
&lt;/h4&gt;&lt;p&gt;软件维护主要是指根据需求变化或硬件环境的变化对应用程序进行部分或全部修改。修改时应充分利用源程序， 修改后要填写程序修改登记表，并在程序变更通知书上写明新旧程序的不同之处。&lt;/p&gt;
&lt;p&gt;软件维护的内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正确性维护
&lt;ul&gt;
&lt;li&gt;指改正在系统开发阶段已发生而系统测试阶段尚未发现的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适应性维护
&lt;ul&gt;
&lt;li&gt;指使应用软件适应信息技术变化和管理需求变化而进行的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完善性维护
&lt;ul&gt;
&lt;li&gt;这是为扩充功能和改善性能而进行的修改， 主要是指对已有的软件系统增加一些在系统分析和设计阶段中没有规定的功能与性能特征。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;预防性维护
&lt;ul&gt;
&lt;li&gt;为了改进应用软件的可靠性和可维护性， 为了适应未来的软／硬件环境的变化 ， 应主动增加预防性的新的功能， 以使应用系统适应各类变化而不被淘汰。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;软件可靠性可用性可维护性指标&#34;&gt;软件可靠性、可用性、可维护性指标
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;可靠性：&lt;strong&gt;指一个系统对于给定的时间间隔内、在给定条件下&lt;/strong&gt;无失效运作&lt;/strong&gt;的概率。可以用 &lt;strong&gt;MTTF / (1 + MTTF)&lt;/strong&gt; 度量，其中 &lt;strong&gt;MTTF 为无故障时间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可用性：&lt;strong&gt;在给定的时间点上，一个系统能够按照规格说明&lt;/strong&gt;正确运作&lt;/strong&gt;的概率。可以用 &lt;strong&gt;MTBF / (1 + MTBF)&lt;/strong&gt; 来度量，其中 &lt;strong&gt;MTBF 为平均失效间隔时间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可维护性：&lt;strong&gt;在给定的使用条件下，在规定的时间间隔内，使用规定的过程和资源&lt;/strong&gt;完成维护活动&lt;/strong&gt;的概率。可以用 &lt;strong&gt;1 / (1 + MTTR)&lt;/strong&gt; 来度量，其中 MTTR 为&lt;strong&gt;平均修复时间&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;软件项目估算&#34;&gt;软件项目估算
&lt;/h3&gt;&lt;h4 id=&#34;cocomo估算模型&#34;&gt;COCOMO估算模型
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基本COCOMO模型
&lt;ul&gt;
&lt;li&gt;本COCOMO模型是一个&lt;strong&gt;静态单变量模型&lt;/strong&gt;，用于对整个软件系统 进行估算。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中级COCOMO模型
&lt;ul&gt;
&lt;li&gt;中级COCOMO模型是一个&lt;strong&gt;静态多变量模型&lt;/strong&gt;，它将软件系统模型分为系统和 部件两个层次 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;详细COCOMO模型
&lt;ul&gt;
&lt;li&gt;它将软件系统模型分为系统、子系统和模块3个层次，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cocomoii模型&#34;&gt;COCOMOII模型
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;应用组装模型&lt;/li&gt;
&lt;li&gt;早期设计阶段模型&lt;/li&gt;
&lt;li&gt;体系结构阶段模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在模型层次结构中有3种不同的规模估算选择： 对象点、 功能点和代码行。 应用组装模型使用的是对象点；早期设计阶段模型使用的是功能点， 功能点可以转换为代码行。&lt;/p&gt;
&lt;h3 id=&#34;gantt图&#34;&gt;Gantt图
&lt;/h3&gt;&lt;p&gt;Gantt图能清晰地描述每个任务从何时开始，到何时结束，任务的进展情况以及各个任务之间的并行性。但是它&lt;strong&gt;不能清晰地反映出各任务之间的依赖关系&lt;/strong&gt;，难以确定整个项目的关键所在，也&lt;strong&gt;不能反映计划中有潜力的部分&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;pert图&#34;&gt;PERT图
&lt;/h3&gt;&lt;img src=&#34;pert.png&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;关键路径：&lt;/strong&gt; 从开始到结束的所有路径中，所花时间最长的一条。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在关键路径上的任务的松弛时间为0&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;软件配置管理&#34;&gt;软件配置管理
&lt;/h3&gt;&lt;p&gt;主要目标：&lt;/p&gt;
&lt;p&gt;变更标识、变更控制、版本控制、确保变更正确的实现、变更报告、&lt;/p&gt;
&lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;版本管理、配置支持、变更支持、过程支持、团队支持、变化报告、审计支持。&lt;/p&gt;
&lt;p&gt;软件配置标识、变更管理、版本控制、系统建立、配置审核、配置状态报告&lt;/p&gt;
&lt;p&gt;配置数据库可以分为以下 3 类：开发库、受控库、产品库&lt;/p&gt;
&lt;h3 id=&#34;风险管理&#34;&gt;风险管理
&lt;/h3&gt;&lt;p&gt;软件风险包含两个特性： &lt;strong&gt;不确定性和损失&lt;/strong&gt;。不确定性是指风险可能发生也可能不发生；损失是指如果风险发生， 就会产生恶性后果。&lt;/p&gt;
&lt;p&gt;不同类型的风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目风险&lt;/li&gt;
&lt;li&gt;技术风险&lt;/li&gt;
&lt;li&gt;商业风险&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;风险识别&#34;&gt;风险识别
&lt;/h3&gt;&lt;p&gt;风险识别试图系统化地指出对项目计划（估算、 进度、 资源分配等）的威胁。&lt;/p&gt;
&lt;p&gt;识别风险的一种方法是&lt;strong&gt;建立风险条目检查表&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;风险预测&#34;&gt;风险预测
&lt;/h3&gt;&lt;p&gt;风险预测又称风险估计， 它试图从两个方面评估一个风险： 风险发生的可能性或概率； 如果风险发生了所产生的后果。&lt;/p&gt;
&lt;p&gt;整体的风险显露度可由下 面的关系确定：&lt;/p&gt;
&lt;p&gt;RE＝ PXC
其中 ， P是风险发生的概率， C是风险发生时带来的项目成本。&lt;/p&gt;
&lt;h3 id=&#34;风险评估&#34;&gt;风险评估
&lt;/h3&gt;&lt;p&gt;种对风险评估很有用的技术就是定义风险参照水准。 对于大多数软件项目来说， &lt;strong&gt;成本、进度和性能&lt;/strong&gt;就是 3 种典型的风险参照水准。&lt;/p&gt;
&lt;h3 id=&#34;风险控制&#34;&gt;风险控制
&lt;/h3&gt;&lt;p&gt;风险控制的目的是辅助项目组建立处理风险的策略。一个有效的策略必须考虑以下 3 个问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;风险避免
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应对风险的最好办法是主动地避免风险&lt;/strong&gt;， 即在风险发生前分析引起风险的原因， 然后采取措施， 以避免风险的发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;风险监控
&lt;ul&gt;
&lt;li&gt;项目管理者应监控某些因素， 这些因素可以提供风险是否正在变高或变低的指示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RMMM 计划
&lt;ul&gt;
&lt;li&gt;RMMM计划将所有风险分析工作文档化， 并由项目管理者作为整个项目计划中的一部分来使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;isoiec-9126-软件质量模型&#34;&gt;ISO/IEC 9126 软件质量模型
&lt;/h3&gt;&lt;p&gt;ISO/IEC 9126 软件质量模型由 3 个层次组成： 第一层是质量特性， 第二层是质量子特性，第三层是度量指标。&lt;/p&gt;
&lt;p&gt;其中， 各质量特性和质量子特性的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能性
&lt;ul&gt;
&lt;li&gt;适应性。 与对规定任务能否提供一组功能以及这组功能是否适合有关的软件属性。&lt;/li&gt;
&lt;li&gt;准确性。 与能够得到正确或相符的结果或效果有关的软件属性。&lt;/li&gt;
&lt;li&gt;互用性。 与其他指定系统进行交互操作的能力相关的软件属性。&lt;/li&gt;
&lt;li&gt;依从性。 使软件服从有关的标准、 约定、 法规及类似规定的软件属性。&lt;/li&gt;
&lt;li&gt;安全性。 与避免对程序及数据的非授权故意或意外访问的能力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠性
&lt;ul&gt;
&lt;li&gt;成熟性。 与由软件故障引起失效的频度有关的软件属性。&lt;/li&gt;
&lt;li&gt;容错性。 与在软件错误或违反指定接口的情况下维持指定的性能水平的能力有关的软件属性。&lt;/li&gt;
&lt;li&gt;易恢复性。 与在故障发生后， 重新建立其性能水平并恢复直接受影响数据的能力， 以及为达到此目的所需的时间和努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;易使用性
&lt;ul&gt;
&lt;li&gt;易理解性。 与用户为理解逻辑概念及其应用所付出的劳动有关的软件属性。&lt;/li&gt;
&lt;li&gt;易学性。 与用户为学习其应用（例如操作控制、 输入、 输出） 所付出的努力相关的软件属性。&lt;/li&gt;
&lt;li&gt;易操作性。与用户为进行操作和操作控制所付出的努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;效率
&lt;ul&gt;
&lt;li&gt;时间特性。 与响应和处理时间以及软件执行其功能时的吞吐量有关的软件属性。&lt;/li&gt;
&lt;li&gt;资源特性。 与软件执行其功能时， 所使用的资源量以及使用资源的持续时间有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可维护性
&lt;ul&gt;
&lt;li&gt;易分析性。 与为诊断缺陷或失效原因， 或为判定待修改的部分所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;易改变性。 与进行修改、 排错或适应环境变换所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;稳定性。 与修改造成未预料效果的风险有关的软件属性。&lt;/li&gt;
&lt;li&gt;易测试性。 为确认经修改软件所需努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可移植性
&lt;ul&gt;
&lt;li&gt;适应性。 与软件转移到不同环境时的处理或手段有关的软件属性。&lt;/li&gt;
&lt;li&gt;易安装性。 与在指定环境下安装软件所需努力有关的软件属性。&lt;/li&gt;
&lt;li&gt;一致性。 使软件服从与可移植性有关的标准或约定的软件属性。&lt;/li&gt;
&lt;li&gt;易替换性。 与一软件在该软件环境中用来替代指定的其他软件的可能和努力有关的软件属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mc-call软件质量模型&#34;&gt;Mc Call软件质量模型
&lt;/h3&gt;&lt;p&gt;Mc Call也给出了一个三层模型框架， 第一层是质量特性， 第二层是评价准则，第三层是度量指标。&lt;/p&gt;
&lt;h3 id=&#34;软件评审&#34;&gt;软件评审
&lt;/h3&gt;&lt;p&gt;通常， 把 “质量” 理解为 “用户满意程度“。为了使得用户满意， 有以下两个必要条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设计的规格说明书符合用户的要求， 这称为&lt;strong&gt;设计质量&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序按照设计规格说明所规定的情况正确执行 ， 这称为&lt;strong&gt;程序质量&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设计质量的评审内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计质量评审的对象是在需求分析阶段产生的软件需求规格说明、 数据需求规格说明， 以及在软件概要设计阶段产生的软件概要设计说明书等。 通常从以下几个方面进行评审。
&lt;ul&gt;
&lt;li&gt;评价软件的规格说明是否合乎用户的要求&lt;/li&gt;
&lt;li&gt;评审可靠性&lt;/li&gt;
&lt;li&gt;评审保密措施实现情况&lt;/li&gt;
&lt;li&gt;评审操作特性实施情况&lt;/li&gt;
&lt;li&gt;评审性能实现情况&lt;/li&gt;
&lt;li&gt;评审软件是否具有可修改性、 可扩充性 、 可互换性和可移植性。&lt;/li&gt;
&lt;li&gt;评审软件是否具有可测试性。&lt;/li&gt;
&lt;li&gt;评审软件是否具有复用性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序质量的评审内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序质量评审通常是从开发者的角度进行评审， 与开发技术直接相关。 它是着眼于软件本身的结构、 与运行环境的接口以及变更带来的影响而进行的评审活动。软件的结构如下：
&lt;ul&gt;
&lt;li&gt;功能结构&lt;/li&gt;
&lt;li&gt;功能的通用性&lt;/li&gt;
&lt;li&gt;模块的层次&lt;/li&gt;
&lt;li&gt;模块结构&lt;/li&gt;
&lt;li&gt;处理过程的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与运行环境的接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行环境包括硬件、 其他软件和用户， 主要的检查项目如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与硬件的接口&lt;/li&gt;
&lt;li&gt;与用户的接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件容错技术&#34;&gt;软件容错技术
&lt;/h3&gt;&lt;p&gt;容错软件的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一定程度上对自身错误的作用（软件错误）具有屏蔽能力&lt;/li&gt;
&lt;li&gt;在一定程度上能从错误状态自动恢复到正常状态&lt;/li&gt;
&lt;li&gt;在因错误发生错误时仍然能在一定程度上完成预期的功能&lt;/li&gt;
&lt;li&gt;在一定程度上具有容错能力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容错的一般方法：&lt;/p&gt;
&lt;p&gt;实现容错的主要手段是冗余。冗余技术分为 4 类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构冗余
&lt;ul&gt;
&lt;li&gt;按其工作方法可以分为静态、 动态和混合冗余3种。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信息冗余&lt;/li&gt;
&lt;li&gt;时间冗余&lt;/li&gt;
&lt;li&gt;冗余附加技术
&lt;ul&gt;
&lt;li&gt;在屏蔽硬件错误的容错技术中， 冗余附加技术包括：
&lt;ul&gt;
&lt;li&gt;关键程序和数据的冗余存储及调用。&lt;/li&gt;
&lt;li&gt;检测、 表决、 切换、 重构、 纠错和复算的实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在屏蔽软件错误的容错系统中， 冗余附加技术的构成包括：
&lt;ul&gt;
&lt;li&gt;冗余备份程序的存储及调用。&lt;/li&gt;
&lt;li&gt;实现错误检测和错误恢复的程序。&lt;/li&gt;
&lt;li&gt;实现容错软件所需的固化程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件工具&#34;&gt;软件工具
&lt;/h3&gt;&lt;p&gt;软件开发工具通常有需求分析工具 、 设计工具 、 编码与排错工具、 测试工具等。&lt;/p&gt;
&lt;p&gt;软件维护工具主要有版本控制工具、 文档分析工具、 开发信息库工具、 逆向工程工具和再工程工具。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;学习视频：&lt;a class=&#34;link&#34; href=&#34;https://space.bilibili.com/91286799&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;zst_2001的个人空间-zst_2001个人主页-哔哩哔哩视频 (bilibili.com)&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>网络协议</title>
        <link>https://loml717.github.io/p/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</link>
        <pubDate>Mon, 07 Oct 2024 16:38:15 +0800</pubDate>
        
        <guid>https://loml717.github.io/p/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</guid>
        <description>&lt;h1 id=&#34;网络协议&#34;&gt;网络协议
&lt;/h1&gt;&lt;p&gt;网络协议是计算机网络中进行数据交互而建立的一种规则，即一套约定、标准的集合。&lt;/p&gt;
&lt;h2 id=&#34;osi七层模型&#34;&gt;OSI七层模型
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;七层模型&lt;/th&gt;
          &lt;th&gt;层概念&lt;/th&gt;
          &lt;th&gt;层功能&lt;/th&gt;
          &lt;th&gt;协议&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;物理层&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;数据链路层&lt;/td&gt;
          &lt;td&gt;物理链路层&lt;/td&gt;
          &lt;td&gt;以二进制的数据形式在物理媒介上进行传输数据&lt;/td&gt;
          &lt;td&gt;ISO@2100&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;网络层&lt;/td&gt;
          &lt;td&gt;网络&lt;/td&gt;
          &lt;td&gt;为数据包选择路由&lt;/td&gt;
          &lt;td&gt;IP、ICMP、BGP、OSPF&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;传输层&lt;/td&gt;
          &lt;td&gt;传输&lt;/td&gt;
          &lt;td&gt;提供端对端的接口&lt;/td&gt;
          &lt;td&gt;TCP、UDP&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;会话层&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;表示层&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;应用层&lt;/td&gt;
          &lt;td&gt;最接近用户的应用层&lt;/td&gt;
          &lt;td&gt;提供文件传输、邮件、文件共享、数据加密等等&lt;/td&gt;
          &lt;td&gt;HTTP、SNMP、FTP、NFS、DNS&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;1应用层&#34;&gt;1、应用层
&lt;/h3&gt;&lt;p&gt;通过进程间的数据交互来完成特定的网络应用，对于不同的网络应用需用不同的网络协议。如，web 服务用 HTTP 协议、邮件传输用 SMTP 协议。应用层间交互的数据称之为&lt;strong&gt;报文&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNS 协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;域名解析系统（DNS	Domain Name System），DNS 是互联的一个分布式数据库，主要存储 IP 和域名的对应关系，能够让用户更方便的访问互联网，而不用记住繁琐的 ip 地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP 协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;超文本传输（HTTP	HyperText Transfer Protocol），为了便于发布和接受 HTML 文件。&lt;/p&gt;
&lt;h3 id=&#34;2传输层&#34;&gt;2、传输层
&lt;/h3&gt;&lt;p&gt;为两台主机之间的进程进行提供数据传输。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP 协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传输控制协议（TCP	Transmission Control Protocol），提供面向连接的、可靠的数据传输服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UDP 协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户数据协议（UDP	User Datagram Protocol），提供无连接的数据传输，不保证数据安全可靠性。UDP 无报文，支持一对一、一对多、多对一、多对多的交互通信。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git使用教程</title>
        <link>https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
        <pubDate>Sun, 29 Sep 2024 17:15:03 +0800</pubDate>
        
        <guid>https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
        <description>&lt;img src="https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git.png" alt="Featured image of post Git使用教程" /&gt;&lt;h1 id=&#34;git使用教程&#34;&gt;Git使用教程
&lt;/h1&gt;&lt;h2 id=&#34;初始化配值&#34;&gt;初始化配值
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装
&lt;ul&gt;
&lt;li&gt;官网上点击下载即可，除安装位置外，只需点击下一步。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化配置
&lt;ul&gt;
&lt;li&gt;配置用户名和邮箱 &lt;code&gt;git config --global user.name &amp;quot;loml717&amp;quot;&lt;/code&gt;  &lt;code&gt;git config --global user.email loml717@learn.com&lt;/code&gt;，用于标识提交内容的身份是谁
&lt;ul&gt;
&lt;li&gt;省略（Local）：本地配置，只对本地仓库有效&lt;/li&gt;
&lt;li&gt;&amp;ndash;global：全局配置，所有仓库生效&lt;/li&gt;
&lt;li&gt;&amp;ndash;system：系统配置，对本电脑所有用户生效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存用户名和密码 &lt;code&gt;git config --global credential.helper store&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看 Git 配置信息 &lt;code&gt;git config --global --list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新建版本库&#34;&gt;新建版本库
&lt;/h2&gt;&lt;p&gt;创建仓库的两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本地创建仓库：&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过添加参数，如 &lt;code&gt;git init my-repo&lt;/code&gt; 则会创建一个名为 my-repo 的仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;git init&lt;/code&gt; 初始化本地仓库后，git 会在当前文件夹下创建 .git 文件夹，用于保存该文件夹的仓库信息，并表明该文件夹为一个仓库。删除 .git 文件夹，则表明该文件夹不是仓库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png&#34;
	width=&#34;1258&#34;
	height=&#34;244&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93_hu9586326607969133416.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93_hu3950280678455723763.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;515&#34;
		data-flex-basis=&#34;1237px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从远程服务器克隆一个仓库：&lt;code&gt;git clone&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git clone &amp;lt;远程仓库地址&amp;gt; 即可将远程仓库创建至本地&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git的工作区域和文件状态&#34;&gt;Git的工作区域和文件状态
&lt;/h2&gt;&lt;p&gt;Git 的数据管理可分为三个区域：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;工作区：实际操作的目录，.git 所在的目录&lt;/li&gt;
&lt;li&gt;暂存区：临时存放即将提交的修改内容&lt;/li&gt;
&lt;li&gt;本地仓库：Git 存储代码的版本信息的主要位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Git 文件中的几种状态：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;未跟踪：新创建的尚未被 git 管理&lt;/li&gt;
&lt;li&gt;未修改：被 git 管理，但内容没有变化&lt;/li&gt;
&lt;li&gt;已修改：修改了，尚未添加至暂存区&lt;/li&gt;
&lt;li&gt;已暂存：修改后添加到暂存区&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81.png&#34;
	width=&#34;2156&#34;
	height=&#34;1079&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81_hu7696283050929269719.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81_hu13697550523304496684.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;199&#34;
		data-flex-basis=&#34;479px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-基本使用语法&#34;&gt;Git 基本使用语法
&lt;/h2&gt;&lt;h3 id=&#34;git-status&#34;&gt;git status
&lt;/h3&gt;&lt;p&gt;查看仓库的状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E4%BB%93%E5%BA%93%E7%8A%B6%E6%80%81.png&#34;
	width=&#34;1264&#34;
	height=&#34;368&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E4%BB%93%E5%BA%93%E7%8A%B6%E6%80%81_hu10008576932167673638.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E4%BB%93%E5%BA%93%E7%8A%B6%E6%80%81_hu14648367488950203436.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;343&#34;
		data-flex-basis=&#34;824px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-s：表示简略模式显示仓库状态，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Untracked files：文件为跟踪，表示文件处于工作区&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;git-add&#34;&gt;git add
&lt;/h3&gt;&lt;p&gt;将文件添加到暂存区&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E4%BB%93%E5%BA%93%E7%8A%B6%E6%80%812.png&#34;
	width=&#34;1070&#34;
	height=&#34;332&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E4%BB%93%E5%BA%93%E7%8A%B6%E6%80%812_hu15601156070930759228.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E4%BB%93%E5%BA%93%E7%8A%B6%E6%80%812_hu4619398341199028392.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;322&#34;
		data-flex-basis=&#34;773px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件显示为绿色时，代表文件存放在暂存区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意！！！ 使用 &lt;code&gt;git rm --cache &amp;lt;file&amp;gt;&lt;/code&gt; 可以将文件从暂存区撤回工作区&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;git-commit&#34;&gt;git commit
&lt;/h3&gt;&lt;p&gt;提交文件到仓库中（将暂存区中的文件提交到仓库中）&lt;/p&gt;
&lt;p&gt;-m 参数：该参数用于描述提交的信息。建议每次提交都带上，否则会强制进入文本输入（eg：vim）要求你输入信息&lt;/p&gt;
&lt;p&gt;**小技巧：**使用 &lt;code&gt;git -a -m &amp;quot;&amp;quot;&lt;/code&gt; 可以同时完成提交和暂存两个动作&lt;/p&gt;
&lt;h3 id=&#34;git-log&#34;&gt;git log
&lt;/h3&gt;&lt;p&gt;用于查看提交记录&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95.png&#34;
	width=&#34;1356&#34;
	height=&#34;436&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95_hu5836693182275284003.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95_hu6224861262995671892.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;311&#34;
		data-flex-basis=&#34;746px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;使用参数 &lt;code&gt;git log --oneline&lt;/code&gt; 仅显示提交的 ID 和提交信息&lt;/p&gt;
&lt;h2 id=&#34;回退版本&#34;&gt;回退版本
&lt;/h2&gt;&lt;h3 id=&#34;git-reset---soft&#34;&gt;git reset &amp;ndash;soft
&lt;/h3&gt;&lt;p&gt;回退到某一个版本，并且保留工作区和暂存区的所有修改内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_reset_soft.png&#34;
	width=&#34;2164&#34;
	height=&#34;1430&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_reset_soft_hu1920477276732208150.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_reset_soft_hu9170082774352484769.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;363px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;git-reset---hard&#34;&gt;git reset &amp;ndash;hard
&lt;/h3&gt;&lt;p&gt;回退到某一个版本，并且丢弃工作区和暂存区的所有修改内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_reset_hard.png&#34;
	width=&#34;1612&#34;
	height=&#34;1152&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_reset_hard_hu13917093230682029782.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_reset_hard_hu8392761666997332459.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;335px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;git-reset---mixed&#34;&gt;git reset &amp;ndash;mixed
&lt;/h3&gt;&lt;p&gt;默认参数&lt;/p&gt;
&lt;p&gt;回退到某一个版本，保存工作区的修改内容，丢弃暂存区的修改内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_reset.png&#34;
	width=&#34;1528&#34;
	height=&#34;1158&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_reset_hu16344890979074493623.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_reset_hu8545435006585940121.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;git-reflog&#34;&gt;git reflog
&lt;/h3&gt;&lt;p&gt;查看操作的历史记录，可借助操作的历史记录和 &lt;code&gt;git reset --hard&lt;/code&gt; 回溯到之前某一个误操作的命令之前&lt;/p&gt;
&lt;h2 id=&#34;查看差异&#34;&gt;查看差异
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt; 用于查看工作区、暂存区、本地仓库之间的差异，也可用于查看文件在两个特定版本或分支之间的差异&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不加参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认比较工作区和暂存区之间的差异，显示发生更改的文件以及更改的详细信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_diff.png&#34;
	width=&#34;2514&#34;
	height=&#34;420&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_diff_hu9336437624422792156.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_diff_hu12040246128594081449.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;598&#34;
		data-flex-basis=&#34;1436px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HEAD 参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;比较工作区和版本库之间的内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_diff_HEAD.png&#34;
	width=&#34;1578&#34;
	height=&#34;424&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_diff_HEAD_hu7290185542847590748.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_diff_HEAD_hu2965077661842694190.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;372&#34;
		data-flex-basis=&#34;893px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ndash;cached 参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;比较暂存区和版本库之间的内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结果同上图&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git diff &amp;lt;版本提交 ID1&amp;gt; &amp;lt;版本提交 ID2&amp;gt; [指定文件名称]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;比较（可指定）文件两次不同版本之间的差异&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_diff_%E7%89%88%E6%9C%ACID1_%E7%89%88%E6%9C%ACID2.png&#34;
	width=&#34;1474&#34;
	height=&#34;332&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_diff_%E7%89%88%E6%9C%ACID1_%E7%89%88%E6%9C%ACID2_hu8648598315040167430.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_diff_%E7%89%88%E6%9C%ACID1_%E7%89%88%E6%9C%ACID2_hu16468195376548306577.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;443&#34;
		data-flex-basis=&#34;1065px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;补充：HEAD 可用于表示当前分支的最新提交，HEAD~ 或 HEAD^ 可用于表示上一次提交，加数字可表示多个之前的版本（eg: HEAD~2 表示当前版本的前两个版本）&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;删除文件&#34;&gt;删除文件
&lt;/h2&gt;&lt;p&gt;两种方式：&lt;/p&gt;
&lt;h3 id=&#34;借助-git-更新版本达到删除文件的目的&#34;&gt;借助 git 更新版本达到删除文件的目的
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从工作区删除文件（即删除本地文件）&lt;/li&gt;
&lt;li&gt;从暂存区删除文件（使用 &lt;code&gt;git add .&lt;/code&gt; 更新工作区文件到暂存区）&lt;/li&gt;
&lt;li&gt;从本地仓库删除文件（使用 &lt;code&gt;git commit&lt;/code&gt; 更新暂存区到本地仓库中）&lt;/li&gt;
&lt;li&gt;从而达到删除文件的目的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用-git-rm-命令&#34;&gt;使用 git rm 命令
&lt;/h3&gt;&lt;p&gt;该命令会同时删除工作区和暂存区中的文件，&lt;strong&gt;但本地仓库中任然存在该文件，需重新提交从而从本地仓库中删除文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git rm &amp;lt;file&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;把文件从工作区和暂存区同时删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rm --cached &amp;lt;file&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;把文件从暂存区中删除，但保留在当前工作区中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rm -r *&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;递归删除某个目录下的所有子目录和文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;忽略文件&#34;&gt;忽略文件
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;.gitignore&lt;/strong&gt; 文件可使该文件夹下的某些文件（为被添加到版本库中的文件）被忽略，不被加入到版本库中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应该忽略的文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统或者软件自动生成的文件&lt;/li&gt;
&lt;li&gt;编译产生的中间文件和结果文件&lt;/li&gt;
&lt;li&gt;运行时生成日志文件、缓存文件、临时文件&lt;/li&gt;
&lt;li&gt;涉及身份、密码、口令、密钥等敏感信息文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;文件的匹配规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从上到下逐行匹配，一行表示一个忽略模式&lt;/li&gt;
&lt;li&gt;空行或 # 开头的行会被忽略&lt;/li&gt;
&lt;li&gt;使用标准的 glob 模式匹配&lt;/li&gt;
&lt;li&gt;** 表示匹配任意的中间目录&lt;/li&gt;
&lt;li&gt;! 表示取反，即指定文件一定不会被忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;远程仓库&#34;&gt;远程仓库
&lt;/h2&gt;&lt;p&gt;远程仓库和本地仓库是相互独立的两个仓库，&lt;strong&gt;克隆仓库&lt;/strong&gt;即指把远程仓库的所有内容复制到本地。&lt;/p&gt;
&lt;h3 id=&#34;远程仓库地址的两种方式&#34;&gt;&lt;strong&gt;远程仓库地址的两种方式：&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTTPS
&lt;ul&gt;
&lt;li&gt;每次 push 需验证用户名和密码（不推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSH
&lt;ul&gt;
&lt;li&gt;push 时不需要用户名和密码，但需要在 github 上添加 SSH 公钥配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;配置-ssh-密钥&#34;&gt;配置 SSH 密钥
&lt;/h4&gt;&lt;p&gt;使用 ssh 方式连接远程仓库，必须配置 ssh 密钥&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;！！！建议配置时，上网查阅，此处记录较为简陋&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用该命令&lt;code&gt;ssh-keygen -t rsa -b 4096&lt;/code&gt; 用于生成密钥&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/ssh-keygen.png&#34;
	width=&#34;1804&#34;
	height=&#34;720&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/ssh-keygen_hu10060007959036786188.png 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/ssh-keygen_hu732416696815963097.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;250&#34;
		data-flex-basis=&#34;601px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;执行后，会生成密钥文件（id_rsa）和公钥文件(id_rsa.pub)，将公钥填入账户配置中即可。(如果指定文件名称，则会生成对应的文件及文件.pub，同时还需再进一步配置)&lt;/p&gt;
&lt;h3 id=&#34;克隆仓库&#34;&gt;克隆仓库
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;克隆仓库 &lt;code&gt;git clone repo-address&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;推送更新内容 &lt;code&gt;git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拉取更新内容 &lt;code&gt;git pull &amp;lt;remote&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关联本地仓库和远程仓库&#34;&gt;关联本地仓库和远程仓库
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;建立本地仓库和远程仓库的关联：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立连接：&lt;code&gt;git remote add &amp;lt;shortname&amp;gt; &amp;lt;url&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;将本地仓库与远程仓库连接起来，其中 shortname 设置远程仓库的别名，url 为远程仓库的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看仓库信息：&lt;code&gt;git remote -v&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;查看当前仓库所对应的远程仓库的别名和地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指定本地分支名称：&lt;code&gt;git branch -M main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;建立关联分支：&lt;code&gt;git push -u origin main:main&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;将本地仓库的 main 分支和远程仓库的 main 分支关联起来，若本地与远程分支名相同，建立连接时可省略冒号后面部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同步远程仓库与本地仓库的内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git pull &amp;lt;远程仓库别名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;将远程仓库文件拉取到本地再合并（可能会因内容冲突而失败）&lt;/li&gt;
&lt;li&gt;省略参数默认为 &lt;code&gt;git pull origin main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt; 与该命令相同，都可以从远程仓库获取修改的内容，但&lt;strong&gt;不会自动合并&lt;/strong&gt;，需手动合并&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分支&#34;&gt;分支
&lt;/h2&gt;&lt;h3 id=&#34;分支的基本操作&#34;&gt;分支的基本操作
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看当前所有分支：&lt;code&gt;git branch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建新分支：&lt;code&gt;git branch &amp;lt;分支名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换不同分支：&lt;code&gt;git checkout &amp;lt;分支名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt; 也可用于恢复文件，若出现文件名与分支名相同的情况，则默认为切换分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git switch &amp;lt;分支名&amp;gt;&lt;/code&gt; 专门用于切换分支名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;合并分支：&lt;code&gt;git merge &amp;lt;分支名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将指定分支合并到当前分支&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看分支图：&lt;code&gt;git log --graph --oneline --decorate --all&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除分支：&lt;code&gt;git branch -d&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-d：只能删除已经被合并的分支&lt;/li&gt;
&lt;li&gt;-D：强制删除分支&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解决合并冲突&#34;&gt;解决合并冲突
&lt;/h3&gt;&lt;p&gt;当两个分支中出现同一份文件的同一行代码出现差异时，就会发生合并冲突&lt;/p&gt;
&lt;p&gt;当发生合并冲突时，需到文件对应位置进行修改再提交&lt;/p&gt;
&lt;p&gt;中断合并：&lt;code&gt;git merge --abort&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;回退和rebase&#34;&gt;回退和rebase
&lt;/h3&gt;&lt;h4 id=&#34;回退分支&#34;&gt;回退分支
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;回退到某一分支：&lt;code&gt;git checkout -b &amp;lt;分支名&amp;gt; &amp;lt;对应分支ID&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rebase变基&#34;&gt;rebase变基
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git rebase &amp;lt;分支名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;rebase执行的操作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/rebase.PNG&#34;
	width=&#34;2139&#34;
	height=&#34;1215&#34;
	srcset=&#34;https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/rebase_hu74654466940332002.PNG 480w, https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/rebase_hu3169999775974732021.PNG 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;422px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;merge和rebase&#34;&gt;Merge和Rebase
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;merge
&lt;ul&gt;
&lt;li&gt;优：不会破坏原分支的提交历史，方便回溯和查看&lt;/li&gt;
&lt;li&gt;缺：产生额外提交节点，分支图比较复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rebase
&lt;ul&gt;
&lt;li&gt;优：不新增额外的提交记录，形成线性历史，直观干净&lt;/li&gt;
&lt;li&gt;缺：改变提交历史，改变当前分支 branch out 的节点，避免在共享分支使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Win10任务栏透明</title>
        <link>https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/</link>
        <pubDate>Sat, 28 Sep 2024 10:23:47 +0800</pubDate>
        
        <guid>https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/</guid>
        <description>&lt;img src="https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/5.png" alt="Featured image of post Win10任务栏透明" /&gt;&lt;h1 id=&#34;通过regedit使win10任务栏透明&#34;&gt;通过regedit使win10任务栏透明
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过 win + R 输入 regedit 打开注册表&lt;img src=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/1.png&#34;
	width=&#34;2880&#34;
	height=&#34;1800&#34;
	srcset=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/1_hu6265096891015556804.png 480w, https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/1_hu3203776095451660311.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定位到目录&lt;code&gt;计算机\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/2.png&#34;
	width=&#34;2880&#34;
	height=&#34;1800&#34;
	srcset=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/2_hu16832649965650392185.png 480w, https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/2_hu9673627919363668169.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;右侧空白处右键，新建→DWORD (32位) 值，并将其重命名为 &lt;code&gt;TaskbarAcrylicOpacity&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/3.png&#34;
	width=&#34;2880&#34;
	height=&#34;1800&#34;
	srcset=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/3_hu4909223878809854480.png 480w, https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/3_hu7310427499959324183.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双击文件，&lt;strong&gt;选择十进制&lt;/strong&gt;，调整数据数值，0为完全透明，10为完全不透明，点击确定即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/4.png&#34;
	width=&#34;2880&#34;
	height=&#34;1800&#34;
	srcset=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/4_hu10103944926029115434.png 480w, https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/4_hu17075568848433583157.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/5.png&#34;
	width=&#34;2880&#34;
	height=&#34;1800&#34;
	srcset=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/5_hu297369554155287310.png 480w, https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/5_hu3892218188305807882.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;5&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议！（效果应该会更好点）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将颜色选择为自定义，并修改为如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/6.png&#34;
	width=&#34;2880&#34;
	height=&#34;1800&#34;
	srcset=&#34;https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/6_hu9552844228479637790.png 480w, https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/6_hu14835500907843357360.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;6&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>归档</title>
        <link>https://loml717.github.io/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://loml717.github.io/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>关于</title>
        <link>https://loml717.github.io/%E5%85%B3%E4%BA%8E/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://loml717.github.io/%E5%85%B3%E4%BA%8E/</guid>
        <description>&lt;h1 id=&#34;博客使用说明&#34;&gt;博客使用说明
&lt;/h1&gt;&lt;h2 id=&#34;创建文章&#34;&gt;创建文章
&lt;/h2&gt;&lt;h3 id=&#34;方式一&#34;&gt;方式一
&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;cmd&lt;/code&gt; 中输入&lt;code&gt;hugo new content post/文章名称/index.md&lt;/code&gt; 即可生成对应文件，文件头部会自动生成类似下方图片的参数设置，通过修改相关参数即可使该文章在主页中出现不同的效果，同时还可以给文章起到分类作用。参数设置成功后即可输入文章相关内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意！参数上边与下边都需要用分割线分隔开&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/%E5%85%B3%E4%BA%8E/image1.png&#34;
	width=&#34;1998&#34;
	height=&#34;850&#34;
	srcset=&#34;https://loml717.github.io/%E5%85%B3%E4%BA%8E/image1_hu2329282943116448934.png 480w, https://loml717.github.io/%E5%85%B3%E4%BA%8E/image1_hu1253308470572152549.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;235&#34;
		data-flex-basis=&#34;564px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;默认无法生成归类等参数的设置，可以通过源代码模式编写即可，如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/%E5%85%B3%E4%BA%8E/%E6%BA%90%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%BC%8F%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0%E5%A4%B4%E5%8F%82%E6%95%B0.png&#34;
	width=&#34;1672&#34;
	height=&#34;416&#34;
	srcset=&#34;https://loml717.github.io/%E5%85%B3%E4%BA%8E/%E6%BA%90%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%BC%8F%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0%E5%A4%B4%E5%8F%82%E6%95%B0_hu1554085257404494718.png 480w, https://loml717.github.io/%E5%85%B3%E4%BA%8E/%E6%BA%90%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%BC%8F%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0%E5%A4%B4%E5%8F%82%E6%95%B0_hu6879506742858236141.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;401&#34;
		data-flex-basis=&#34;964px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;方式二&#34;&gt;方式二
&lt;/h3&gt;&lt;p&gt;在路径 &lt;code&gt;content/post&lt;/code&gt; 下创建以文章名命名的文件夹，在该文件夹下创建 &lt;code&gt;index.md&lt;/code&gt; 文件，在文件中添加  &lt;code&gt;yaml&lt;/code&gt;  代码，按如下方式设置参数即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Chinese Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;这是一个副标题&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2020-09-09&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;slug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-chinese&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helena-hertz-wWZzXlDpMog-unsplash.jpg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;categories&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;测试&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;创建分类&#34;&gt;创建分类
&lt;/h2&gt;&lt;p&gt;找到路径 &lt;code&gt;content/categories&lt;/code&gt; 在该文件下创建如下文件夹和文件 &lt;code&gt;分类名称/_index.md&lt;/code&gt; , 在 &lt;code&gt;.md&lt;/code&gt; 文件的头部输入如下类似的参数即可成功创建一个分类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意！参数必须写在 YAML Front Matter 中&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;This is an example category&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;slug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hutomo-abrianto-l2jk-uxb1BY-unsplash.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;#2a9d8f&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;#fff&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;参数介绍：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;title：分类标题&lt;/li&gt;
&lt;li&gt;description：分类描述，会在归档中显示&lt;/li&gt;
&lt;li&gt;slug：在右侧边栏显示分类名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;添加友链&#34;&gt;添加友链
&lt;/h2&gt;&lt;p&gt;按照如下格式，在 &lt;code&gt;content/page/links/index.md&lt;/code&gt; 下的 &lt;code&gt;yaml&lt;/code&gt; 代码中添加即可:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub is the world&amp;#39;s largest software development platform.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://www.typescriptlang.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ts-logo-128.jpg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; 接受本地文件和线上文件&lt;/p&gt;
&lt;h2 id=&#34;将文章同步到-github-上&#34;&gt;将文章同步到 github 上
&lt;/h2&gt;&lt;p&gt;直接通过 git 将包含 hugo 执行程序和该主题所有相关配置文件的文件夹重新上传至仓库中即可，github 将通过 action 自动同步静态网页文件到公开为站点的仓库中，文章就成功的上传到博客中了。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>搜索</title>
        <link>https://loml717.github.io/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://loml717.github.io/search/</guid>
        <description></description>
        </item>
        <item>
        <title>友情链接</title>
        <link>https://loml717.github.io/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://loml717.github.io/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
