<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>软考 on loml717</title>
        <link>https://loml717.github.io/categories/%E8%BD%AF%E8%80%83/</link>
        <description>Recent content in 软考 on loml717</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>loml717</copyright>
        <lastBuildDate>Fri, 11 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://loml717.github.io/categories/%E8%BD%AF%E8%80%83/index.xml" rel="self" type="application/rss+xml" /><item>
        <title></title>
        <link>https://loml717.github.io/p/</link>
        <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>https://loml717.github.io/p/</guid>
        <description>&lt;h1 id=&#34;中级--软件设计师知识点&#34;&gt;中级&amp;ndash;软件设计师（知识点）
&lt;/h1&gt;&lt;h2 id=&#34;知识产权&#34;&gt;知识产权
&lt;/h2&gt;&lt;h3 id=&#34;著作权版权&#34;&gt;著作权（版权）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;人身权
&lt;ul&gt;
&lt;li&gt;发表权（期限：终身+50年）、署名权、修改权、保护作品完整权&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;财产权&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;专利地域性&#34;&gt;专利地域性
&lt;/h3&gt;&lt;p&gt;各国主管机关依照本国法律授予的知识产权，只能在其本国领域内受法律保护（哪里申请，哪里保护）&lt;/p&gt;
&lt;h3 id=&#34;计算机软件著作权&#34;&gt;计算机软件著作权
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;主体与客体&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主体
&lt;ul&gt;
&lt;li&gt;计算机软件著作权的主体指&lt;strong&gt;享有著作权的人&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;根据规定：著作权法（《中华人民共和国著作权法》）、《计算机软件保护条例》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客体
&lt;ul&gt;
&lt;li&gt;计算机软件著作权的主体指&lt;strong&gt;著作权法保护的计算机著作权的范围（受保护的对象）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;计算机程序：源程序和目标程序&lt;/li&gt;
&lt;li&gt;计算机软件的文档：程序设计说明书、流程图和用户手册&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据规定：《著作权法》第三条、《计算机软件保护条例》第二条&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;权利&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人身权
&lt;ul&gt;
&lt;li&gt;发表权、开发者身份权（署名权）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;财产权&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;保护期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机软件著作权的权利自软件开发完成之日起产生，保护期为50年。保护期满，除开发者身份权外，其他权利终止。&lt;/p&gt;
&lt;h3 id=&#34;职务作品&#34;&gt;职务作品
&lt;/h3&gt;&lt;p&gt;职务软件作品指公民在单位任职期间为执行本单位工作任务所开发的计算机软件作品。（开发人员仅享有署名权）&lt;/p&gt;
&lt;p&gt;若开发的软件不是执行本职工作的结果，其著作权不属单位享有。如果该雇员主要使用了单位的设备，著作权不能属于该雇员个人享有。&lt;/p&gt;
&lt;h3 id=&#34;委托开发&#34;&gt;委托开发
&lt;/h3&gt;&lt;p&gt;接受他人委托开发的软件，其著作权的归属由委托者与受委托者签订书面合同约定；无书面合同或者书面合同未作明确约定的，其著作权由受托人享有。&lt;/p&gt;
&lt;h3 id=&#34;商业秘密权&#34;&gt;商业秘密权
&lt;/h3&gt;&lt;p&gt;商业秘密：指不为公众所知悉的，能为权利人带来经济利益、具有实用性并经权利人采取保密措施的技术信息和经营信息。&lt;/p&gt;
&lt;h3 id=&#34;专利权申请&#34;&gt;专利权申请
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;专利申请原则
&lt;ul&gt;
&lt;li&gt;两个或者两个以上的人分别就同样的发明创造申请专利的，&lt;strong&gt;专利权授给最先申请人&lt;/strong&gt;，同一时间则协商。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;商标权&#34;&gt;商标权
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时间性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我国商标权的保护期限自核准注册之日起&lt;strong&gt;10年内有效&lt;/strong&gt;，但可以根据其所有人的需要&lt;strong&gt;无限地延长权利期限&lt;/strong&gt;，在期限届满前6个月内申请续展注册，每次续展注册的有效期为10年&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;商标注册&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先注册先得，同一时间，先使用先得，未使用协商。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向对象技术&#34;&gt;面向对象技术
&lt;/h2&gt;&lt;h3 id=&#34;类&#34;&gt;类
&lt;/h3&gt;&lt;p&gt;一个类所包含的方法和数据描述一组对象的共同行为和属性。&lt;/p&gt;
&lt;p&gt;类是在对象之上的抽像，对象是类的具体化，是类的实例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类分为三种
&lt;ul&gt;
&lt;li&gt;实体类
&lt;ul&gt;
&lt;li&gt;其对象表示现实世界中真实的实体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口类（边界类）
&lt;ul&gt;
&lt;li&gt;其为用户提供一种与系统合作交互的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制类
&lt;ul&gt;
&lt;li&gt;其用来控制活动流，充当协调者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般类与特殊类
&lt;ul&gt;
&lt;li&gt;一般类为特殊类的父类，特殊类为一般类的子类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对象&#34;&gt;对象
&lt;/h3&gt;&lt;p&gt;对象是基本的运行时的实体，它既包括数据（属性 | 状态），也包括作用与数据的操作（行为 | 方法 | 函数）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个对象通常由对象名、属性和方法 3 个部分组成。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;消息&#34;&gt;消息
&lt;/h3&gt;&lt;p&gt;对象之间进行通信的一种构造叫作消息。&lt;/p&gt;
&lt;p&gt;当一个消息发送给某个对象时，包含要求接收对象去执行某些活动的信息。接收到信息的对象经过解释，然后予以响应。这种通信机制称为消息传递。&lt;/p&gt;
&lt;h3 id=&#34;方法重载&#34;&gt;方法重载
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方法名相同，参数个数不同&lt;/li&gt;
&lt;li&gt;方法名相同，参数类型不同&lt;/li&gt;
&lt;li&gt;方法名相同，参数类型顺序不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装&#34;&gt;封装
&lt;/h3&gt;&lt;p&gt;封装是一种信息隐蔽技术，它的目的是使对象的使用者和生产者分离，使对象的定义和实现分开。&lt;/p&gt;
&lt;h3 id=&#34;继承&#34;&gt;继承
&lt;/h3&gt;&lt;p&gt;继承是父类和子类之间共享数据和方法的机制。&lt;/p&gt;
&lt;p&gt;一个父类可以有多个子类，这些子类都是父类的特例，父类描述类这些子类的公共属性和方法。一个子类可以继承它的父类（或祖先类）中的属性和方法，这些属性和操作在子类中不必定义，子类还可以定义自己的属性和方法。&lt;/p&gt;
&lt;p&gt;单重继承：继承一个父类&lt;/p&gt;
&lt;p&gt;多重继承：继承两个及以上的父类&lt;/p&gt;
&lt;h3 id=&#34;多态&#34;&gt;多态
&lt;/h3&gt;&lt;p&gt;同类的不同的对象收到同一消息可以产生完全不同的结果，这一现象称为多态。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;父类 对象名 =  new 子类&lt;/code&gt; 编译看左边，运行看右边&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多态的不同形式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多态
&lt;ul&gt;
&lt;li&gt;通用的
&lt;ul&gt;
&lt;li&gt;参数：泛型&lt;/li&gt;
&lt;li&gt;包含：父类引用子类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特定的
&lt;ul&gt;
&lt;li&gt;过载：重载方法&lt;/li&gt;
&lt;li&gt;强制：强制类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;静态动态绑定&#34;&gt;静态、动态绑定
&lt;/h3&gt;&lt;p&gt;绑定是一个把过程调用和响应调用所需要执行的代码加以结合的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态绑定：在编译时进行&lt;/li&gt;
&lt;li&gt;动态绑定：在运行时进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面向对象设计原则&#34;&gt;面向对象设计原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单一责任原则&lt;/li&gt;
&lt;li&gt;就一个类而言，应该仅有一个引起它变化的原因&lt;/li&gt;
&lt;li&gt;开放-封闭原则
&lt;ul&gt;
&lt;li&gt;对扩展开放，对修改封闭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;里氏替换原则
&lt;ul&gt;
&lt;li&gt;基类出现的地方，子类必定能出现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依赖倒置原则
&lt;ul&gt;
&lt;li&gt;依赖于抽象，而不依赖于细节（实现）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口分离原则
&lt;ul&gt;
&lt;li&gt;依赖于抽象，而不依赖与具体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共同重用原则
&lt;ul&gt;
&lt;li&gt;重用包中的一个类，就要重用包中的所有类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共同封闭原则
&lt;ul&gt;
&lt;li&gt;一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他的包不造成影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面向对象&#34;&gt;面向对象
&lt;/h3&gt;&lt;h4 id=&#34;分析ooa&#34;&gt;分析（OOA）
&lt;/h4&gt;&lt;p&gt;面向对象分析的目的是为了获得对应用问题的理解。理解的目的是确定系统的功能、性能的要求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5 个活动&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认定对象
&lt;ul&gt;
&lt;li&gt;定义问题域，将自然存在的 ‘名词’ 作为一个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组织对象&lt;/li&gt;
&lt;li&gt;对象间的相互作用&lt;/li&gt;
&lt;li&gt;基于对象的操作&lt;/li&gt;
&lt;li&gt;定义对象的内部信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;设计ood&#34;&gt;设计（OOD）
&lt;/h4&gt;&lt;p&gt;面向对象设计是将 OOA 所创建的分析模型转化为设计模型，其目标是定义系统构造蓝图。&lt;/p&gt;
&lt;p&gt;OOD 在复用 OOA 模型的基础上，包含与 OOA 对应如下五个活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;识别类及对象&lt;/li&gt;
&lt;li&gt;定义属性&lt;/li&gt;
&lt;li&gt;定义服务&lt;/li&gt;
&lt;li&gt;识别关系&lt;/li&gt;
&lt;li&gt;识别包&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;测试&#34;&gt;测试
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;4 个层次&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法层&lt;/li&gt;
&lt;li&gt;类层&lt;/li&gt;
&lt;li&gt;模板层&lt;/li&gt;
&lt;li&gt;系统层&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;补充&#34;&gt;补充
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类的静态方法只能访问该类的静态数据成员&lt;/li&gt;
&lt;li&gt;静态数据成员可以被该类的所有方法访问&lt;/li&gt;
&lt;li&gt;该类的对象共享其静态数据成员的值&lt;/li&gt;
&lt;li&gt;在面向对象技术中，对象具有清晰的边界、良好定义的行为、可扩展性的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uml&#34;&gt;UML
&lt;/h2&gt;&lt;p&gt;UML 统一建模语言，由 3 个要素构成，UML 的基本构造块、支配这些构造块如何放置在一起的规则、运用与整个语言的一些公共机制。&lt;/p&gt;
&lt;p&gt;UML 的词汇表包含 3 种构造块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事物
&lt;ul&gt;
&lt;li&gt;对模型中最具有代表性的成分的抽象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关系
&lt;ul&gt;
&lt;li&gt;把事物结合在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图
&lt;ul&gt;
&lt;li&gt;聚集了相关的事物&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事物&#34;&gt;事物
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;4 种事物：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构事物（静态部分）
&lt;ul&gt;
&lt;li&gt;类、接口、协作、用例、主动类、构件、制品、结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行为事物（动态部分）
&lt;ul&gt;
&lt;li&gt;交互、状态机、活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分组事物（组织部分）
&lt;ul&gt;
&lt;li&gt;包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释事物（解释部分）
&lt;ul&gt;
&lt;li&gt;注解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关系&#34;&gt;关系
&lt;/h3&gt;&lt;p&gt;4 种关系：依赖、关联、泛化、实现&lt;/p&gt;
&lt;h4 id=&#34;依赖关系&#34;&gt;依赖关系
&lt;/h4&gt;&lt;p&gt;依赖是两个事物之间的语义关系，其中一个事物（独立事物）发生变化会影响另一个事物（依赖事物）的语义。&lt;/p&gt;
&lt;p&gt;图形： A &amp;mdash;&amp;mdash;&amp;gt; B （A 依赖于 B）&lt;/p&gt;
&lt;h4 id=&#34;关联关系&#34;&gt;关联关系
&lt;/h4&gt;&lt;p&gt;关联是一种结构关系，它描述了一组链，链是对象之间的连接。聚集是一种特殊类型的关联，它描述了整体和部分间的结构关系。&lt;/p&gt;
&lt;p&gt;在关联上可以&lt;strong&gt;标注重复度（多重度）和角色&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;聚集：部分和整体的生命周期不一致，整体消失了，部分仍然存在，部分可以脱离整体存在。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;组合：部分和整体的生命周期一致，整体消失了，部分也消失了，部分不可以脱离整体存在。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;关联多重度&#34;&gt;关联多重度
&lt;/h5&gt;&lt;p&gt;多重度是指一个类的实例能够与另一个类的多少个实例相关联&lt;/p&gt;
&lt;h4 id=&#34;泛化关系&#34;&gt;泛化关系
&lt;/h4&gt;&lt;p&gt;泛化是一种特殊/一般关系，特殊元素（子类）的对象可替代一般元素（父类）的对象。&lt;/p&gt;
&lt;h4 id=&#34;实现关系&#34;&gt;实现关系
&lt;/h4&gt;&lt;p&gt;实现是类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约。&lt;/p&gt;
&lt;h3 id=&#34;图&#34;&gt;图
&lt;/h3&gt;&lt;p&gt;13 种图：类图、对象图、用例图、序列图、通信图、状态图、活动图、构件图、组合结构图、部署图、包图、交互概览图、计时图&lt;/p&gt;
&lt;h4 id=&#34;类图&#34;&gt;类图
&lt;/h4&gt;&lt;p&gt;类图展现了一组对象、接口、协作和它们之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E7%B1%BB%E5%9B%BE.png&#34;
	width=&#34;1786&#34;
	height=&#34;1146&#34;
	srcset=&#34;https://loml717.github.io/p/%E7%B1%BB%E5%9B%BE_hu4822158137995316349.png 480w, https://loml717.github.io/p/%E7%B1%BB%E5%9B%BE_hu7061517334284926786.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;3 种方式使用类图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对系统的词汇建模&lt;/li&gt;
&lt;li&gt;对简单的协作建模&lt;/li&gt;
&lt;li&gt;对逻辑数据库模式建模&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
