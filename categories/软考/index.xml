<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>软考 on loml717</title>
        <link>https://loml717.github.io/categories/%E8%BD%AF%E8%80%83/</link>
        <description>Recent content in 软考 on loml717</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>loml717</copyright>
        <lastBuildDate>Fri, 11 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://loml717.github.io/categories/%E8%BD%AF%E8%80%83/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>软件设计师</title>
        <link>https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</link>
        <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</guid>
        <description>&lt;h1 id=&#34;中级--软件设计师知识点&#34;&gt;中级&amp;ndash;软件设计师（知识点）
&lt;/h1&gt;&lt;h2 id=&#34;知识产权&#34;&gt;知识产权
&lt;/h2&gt;&lt;h3 id=&#34;著作权版权&#34;&gt;著作权（版权）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;人身权
&lt;ul&gt;
&lt;li&gt;发表权（期限：终身+50年）、署名权、修改权、保护作品完整权&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;财产权&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;专利地域性&#34;&gt;专利地域性
&lt;/h3&gt;&lt;p&gt;各国主管机关依照本国法律授予的知识产权，只能在其本国领域内受法律保护（哪里申请，哪里保护）&lt;/p&gt;
&lt;h3 id=&#34;计算机软件著作权&#34;&gt;计算机软件著作权
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;主体与客体&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主体
&lt;ul&gt;
&lt;li&gt;计算机软件著作权的主体指&lt;strong&gt;享有著作权的人&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;根据规定：著作权法（《中华人民共和国著作权法》）、《计算机软件保护条例》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客体
&lt;ul&gt;
&lt;li&gt;计算机软件著作权的主体指&lt;strong&gt;著作权法保护的计算机著作权的范围（受保护的对象）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;计算机程序：源程序和目标程序&lt;/li&gt;
&lt;li&gt;计算机软件的文档：程序设计说明书、流程图和用户手册&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据规定：《著作权法》第三条、《计算机软件保护条例》第二条&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;权利&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人身权
&lt;ul&gt;
&lt;li&gt;发表权、开发者身份权（署名权）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;财产权&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;保护期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机软件著作权的权利自软件开发完成之日起产生，保护期为50年。保护期满，除开发者身份权外，其他权利终止。&lt;/p&gt;
&lt;h3 id=&#34;职务作品&#34;&gt;职务作品
&lt;/h3&gt;&lt;p&gt;职务软件作品指公民在单位任职期间为执行本单位工作任务所开发的计算机软件作品。（开发人员仅享有署名权）&lt;/p&gt;
&lt;p&gt;若开发的软件不是执行本职工作的结果，其著作权不属单位享有。如果该雇员主要使用了单位的设备，著作权不能属于该雇员个人享有。&lt;/p&gt;
&lt;h3 id=&#34;委托开发&#34;&gt;委托开发
&lt;/h3&gt;&lt;p&gt;接受他人委托开发的软件，其著作权的归属由委托者与受委托者签订书面合同约定；无书面合同或者书面合同未作明确约定的，其著作权由受托人享有。&lt;/p&gt;
&lt;h3 id=&#34;商业秘密权&#34;&gt;商业秘密权
&lt;/h3&gt;&lt;p&gt;商业秘密：指不为公众所知悉的，能为权利人带来经济利益、具有实用性并经权利人采取保密措施的技术信息和经营信息。&lt;/p&gt;
&lt;h3 id=&#34;专利权申请&#34;&gt;专利权申请
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;专利申请原则
&lt;ul&gt;
&lt;li&gt;两个或者两个以上的人分别就同样的发明创造申请专利的，&lt;strong&gt;专利权授给最先申请人&lt;/strong&gt;，同一时间则协商。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;商标权&#34;&gt;商标权
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时间性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我国商标权的保护期限自核准注册之日起&lt;strong&gt;10年内有效&lt;/strong&gt;，但可以根据其所有人的需要&lt;strong&gt;无限地延长权利期限&lt;/strong&gt;，在期限届满前6个月内申请续展注册，每次续展注册的有效期为10年&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;商标注册&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先注册先得，同一时间，先使用先得，未使用协商。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向对象技术&#34;&gt;面向对象技术
&lt;/h2&gt;&lt;h3 id=&#34;类&#34;&gt;类
&lt;/h3&gt;&lt;p&gt;一个类所包含的方法和数据描述一组对象的共同行为和属性。&lt;/p&gt;
&lt;p&gt;类是在对象之上的抽像，对象是类的具体化，是类的实例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类分为三种
&lt;ul&gt;
&lt;li&gt;实体类
&lt;ul&gt;
&lt;li&gt;其对象表示现实世界中真实的实体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口类（边界类）
&lt;ul&gt;
&lt;li&gt;其为用户提供一种与系统合作交互的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制类
&lt;ul&gt;
&lt;li&gt;其用来控制活动流，充当协调者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般类与特殊类
&lt;ul&gt;
&lt;li&gt;一般类为特殊类的父类，特殊类为一般类的子类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对象&#34;&gt;对象
&lt;/h3&gt;&lt;p&gt;对象是基本的运行时的实体，它既包括数据（属性 | 状态），也包括作用与数据的操作（行为 | 方法 | 函数）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个对象通常由对象名、属性和方法 3 个部分组成。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;消息&#34;&gt;消息
&lt;/h3&gt;&lt;p&gt;对象之间进行通信的一种构造叫作消息。&lt;/p&gt;
&lt;p&gt;当一个消息发送给某个对象时，包含要求接收对象去执行某些活动的信息。接收到信息的对象经过解释，然后予以响应。这种通信机制称为消息传递。&lt;/p&gt;
&lt;h3 id=&#34;方法重载&#34;&gt;方法重载
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方法名相同，参数个数不同&lt;/li&gt;
&lt;li&gt;方法名相同，参数类型不同&lt;/li&gt;
&lt;li&gt;方法名相同，参数类型顺序不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装&#34;&gt;封装
&lt;/h3&gt;&lt;p&gt;封装是一种信息隐蔽技术，它的目的是使对象的使用者和生产者分离，使对象的定义和实现分开。&lt;/p&gt;
&lt;h3 id=&#34;继承&#34;&gt;继承
&lt;/h3&gt;&lt;p&gt;继承是父类和子类之间共享数据和方法的机制。&lt;/p&gt;
&lt;p&gt;一个父类可以有多个子类，这些子类都是父类的特例，父类描述类这些子类的公共属性和方法。一个子类可以继承它的父类（或祖先类）中的属性和方法，这些属性和操作在子类中不必定义，子类还可以定义自己的属性和方法。&lt;/p&gt;
&lt;p&gt;单重继承：继承一个父类&lt;/p&gt;
&lt;p&gt;多重继承：继承两个及以上的父类&lt;/p&gt;
&lt;h3 id=&#34;多态&#34;&gt;多态
&lt;/h3&gt;&lt;p&gt;同类的不同的对象收到同一消息可以产生完全不同的结果，这一现象称为多态。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;父类 对象名 =  new 子类&lt;/code&gt; 编译看左边，运行看右边&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多态的不同形式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多态
&lt;ul&gt;
&lt;li&gt;通用的
&lt;ul&gt;
&lt;li&gt;参数：泛型&lt;/li&gt;
&lt;li&gt;包含：父类引用子类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特定的
&lt;ul&gt;
&lt;li&gt;过载：重载方法&lt;/li&gt;
&lt;li&gt;强制：强制类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;静态动态绑定&#34;&gt;静态、动态绑定
&lt;/h3&gt;&lt;p&gt;绑定是一个把过程调用和响应调用所需要执行的代码加以结合的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态绑定：在编译时进行&lt;/li&gt;
&lt;li&gt;动态绑定：在运行时进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面向对象设计原则&#34;&gt;面向对象设计原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单一责任原则&lt;/li&gt;
&lt;li&gt;就一个类而言，应该仅有一个引起它变化的原因&lt;/li&gt;
&lt;li&gt;开放-封闭原则
&lt;ul&gt;
&lt;li&gt;对扩展开放，对修改封闭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;里氏替换原则
&lt;ul&gt;
&lt;li&gt;基类出现的地方，子类必定能出现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依赖倒置原则
&lt;ul&gt;
&lt;li&gt;依赖于抽象，而不依赖于细节（实现）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口分离原则
&lt;ul&gt;
&lt;li&gt;依赖于抽象，而不依赖与具体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共同重用原则
&lt;ul&gt;
&lt;li&gt;重用包中的一个类，就要重用包中的所有类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共同封闭原则
&lt;ul&gt;
&lt;li&gt;一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他的包不造成影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面向对象&#34;&gt;面向对象
&lt;/h3&gt;&lt;h4 id=&#34;分析ooa&#34;&gt;分析（OOA）
&lt;/h4&gt;&lt;p&gt;面向对象分析的目的是为了获得对应用问题的理解。理解的目的是确定系统的功能、性能的要求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5 个活动&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认定对象
&lt;ul&gt;
&lt;li&gt;定义问题域，将自然存在的 ‘名词’ 作为一个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组织对象&lt;/li&gt;
&lt;li&gt;对象间的相互作用&lt;/li&gt;
&lt;li&gt;基于对象的操作&lt;/li&gt;
&lt;li&gt;定义对象的内部信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;设计ood&#34;&gt;设计（OOD）
&lt;/h4&gt;&lt;p&gt;面向对象设计是将 OOA 所创建的分析模型转化为设计模型，其目标是定义系统构造蓝图。&lt;/p&gt;
&lt;p&gt;OOD 在复用 OOA 模型的基础上，包含与 OOA 对应如下五个活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;识别类及对象&lt;/li&gt;
&lt;li&gt;定义属性&lt;/li&gt;
&lt;li&gt;定义服务&lt;/li&gt;
&lt;li&gt;识别关系&lt;/li&gt;
&lt;li&gt;识别包&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;测试&#34;&gt;测试
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;4 个层次&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法层&lt;/li&gt;
&lt;li&gt;类层&lt;/li&gt;
&lt;li&gt;模板层&lt;/li&gt;
&lt;li&gt;系统层&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;补充&#34;&gt;补充
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类的静态方法只能访问该类的静态数据成员&lt;/li&gt;
&lt;li&gt;静态数据成员可以被该类的所有方法访问&lt;/li&gt;
&lt;li&gt;该类的对象共享其静态数据成员的值&lt;/li&gt;
&lt;li&gt;在面向对象技术中，对象具有清晰的边界、良好定义的行为、可扩展性的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;uml&#34;&gt;UML
&lt;/h2&gt;&lt;p&gt;UML 统一建模语言，由 3 个要素构成，UML 的基本构造块、支配这些构造块如何放置在一起的规则、运用与整个语言的一些公共机制。&lt;/p&gt;
&lt;p&gt;UML 的词汇表包含 3 种构造块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事物
&lt;ul&gt;
&lt;li&gt;对模型中最具有代表性的成分的抽象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关系
&lt;ul&gt;
&lt;li&gt;把事物结合在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图
&lt;ul&gt;
&lt;li&gt;聚集了相关的事物&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事物&#34;&gt;事物
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;4 种事物：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构事物（静态部分）
&lt;ul&gt;
&lt;li&gt;类、接口、协作、用例、主动类、构件、制品、结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行为事物（动态部分）
&lt;ul&gt;
&lt;li&gt;交互、状态机、活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分组事物（组织部分）
&lt;ul&gt;
&lt;li&gt;包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释事物（解释部分）
&lt;ul&gt;
&lt;li&gt;注解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关系&#34;&gt;关系
&lt;/h3&gt;&lt;p&gt;4 种关系：依赖、关联、泛化、实现&lt;/p&gt;
&lt;h4 id=&#34;依赖关系&#34;&gt;依赖关系
&lt;/h4&gt;&lt;p&gt;依赖是两个事物之间的语义关系，其中一个事物（独立事物）发生变化会影响另一个事物（依赖事物）的语义。&lt;/p&gt;
&lt;img src=&#34;依赖关系.png&#34; style=&#34;zoom:33%;&#34; /&gt;
&lt;h4 id=&#34;关联关系&#34;&gt;关联关系
&lt;/h4&gt;&lt;p&gt;关联是一种结构关系，它描述了一组链，链是对象之间的连接。聚集是一种特殊类型的关联，它描述了整体和部分间的结构关系。&lt;/p&gt;
&lt;p&gt;在关联上可以&lt;strong&gt;标注重复度（多重度）和角色&lt;/strong&gt;。&lt;/p&gt;
&lt;img src=&#34;关联关系.png&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;聚集：部分和整体的生命周期不一致，整体消失了，部分仍然存在，部分可以脱离整体存在。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;聚集关系.png&#34; style=&#34;zoom:38%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组合：部分和整体的生命周期一致，整体消失了，部分也消失了，部分不可以脱离整体存在。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;组合关系.png&#34; style=&#34;zoom:38%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;关联多重度&#34;&gt;关联多重度
&lt;/h5&gt;&lt;p&gt;多重度是指一个类的实例能够与另一个类的多少个实例相关联&lt;/p&gt;
&lt;h4 id=&#34;泛化关系&#34;&gt;泛化关系
&lt;/h4&gt;&lt;p&gt;泛化是一种特殊/一般关系，特殊元素（子类）的对象可替代一般元素（父类）的对象。&lt;/p&gt;
&lt;img src=&#34;泛化关系.png&#34; style=&#34;zoom:48%;&#34; /&gt;
&lt;h4 id=&#34;实现关系&#34;&gt;实现关系
&lt;/h4&gt;&lt;p&gt;实现是类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约。&lt;/p&gt;
&lt;img src=&#34;实现关系.png&#34; style=&#34;zoom:48%;&#34; /&gt;
&lt;h3 id=&#34;图&#34;&gt;图
&lt;/h3&gt;&lt;p&gt;静态建模：类图、对象图、用例图&lt;/p&gt;
&lt;p&gt;动态建模：序列图、通信图、状态图、活动图&lt;/p&gt;
&lt;p&gt;物理建模：构件图、部署图&lt;/p&gt;
&lt;p&gt;交互图：序列图、通信图&lt;/p&gt;
&lt;h4 id=&#34;类图&#34;&gt;类图
&lt;/h4&gt;&lt;p&gt;类图&lt;strong&gt;展现了一组对象、接口、协作和它们之间的关系&lt;/strong&gt;。 类图一般包括类、接口、协作、依赖、泛化、关联。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%B1%BB%E5%9B%BE.png&#34;
	width=&#34;1786&#34;
	height=&#34;1146&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%B1%BB%E5%9B%BE_hu4822158137995316349.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%B1%BB%E5%9B%BE_hu7061517334284926786.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;3 种方式使用类图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对系统的词汇建模&lt;/li&gt;
&lt;li&gt;对简单的协作建模&lt;/li&gt;
&lt;li&gt;对逻辑数据库模式建模&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对象图&#34;&gt;对象图
&lt;/h4&gt;&lt;p&gt;对象图&lt;strong&gt;展示了某一时刻一组对象以及它们之间的关系&lt;/strong&gt;。对象图一般包括对象、链。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%AF%B9%E8%B1%A1%E5%9B%BE.png&#34;
	width=&#34;1742&#34;
	height=&#34;812&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%AF%B9%E8%B1%A1%E5%9B%BE_hu16123999466799113652.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%AF%B9%E8%B1%A1%E5%9B%BE_hu5013731173708976269.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;214&#34;
		data-flex-basis=&#34;514px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;用例图&#34;&gt;用例图
&lt;/h4&gt;&lt;p&gt;用例图&lt;strong&gt;展现了一组用例、参与者以及它们之间的关系&lt;/strong&gt;。用例图一般包括用例、参与者、用例之间的扩展关系（&amp;laquo;extend&amp;gt;&amp;gt;）和包含关系（&amp;laquo;include&amp;gt;&amp;gt;）、参与者和用例之间的关联关系、用例与用例以及参与者与参与者之间的泛化关系。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;参与者：表示人、硬件或其他系统可以扮演的角色&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;用例：一个类，代表一类功能而不是使用该功能的某一具体实例&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%94%A8%E4%BE%8B%E5%9B%BE.png&#34;
	width=&#34;1808&#34;
	height=&#34;888&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%94%A8%E4%BE%8B%E5%9B%BE_hu14172850264649847686.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%94%A8%E4%BE%8B%E5%9B%BE_hu8420020319490870705.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;203&#34;
		data-flex-basis=&#34;488px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含关系（用例&amp;amp;用例）
&lt;ul&gt;
&lt;li&gt;当某一用例被执行时，其箭头指向的用例（被包含用例）也会被执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;扩展关系（用例&amp;amp;用例）
&lt;ul&gt;
&lt;li&gt;一个用例执行的时候，可能会发生一些特殊的情况或可选的情况，这种情况就是这个用例的扩展用例。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;泛化关系（用例&amp;amp;用例 || 参与者&amp;amp;参与者）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;序列图顺序图&#34;&gt;序列图（顺序图）
&lt;/h4&gt;&lt;p&gt;序列图是场景的图形化表示，&lt;strong&gt;描述了以时间顺序组织的对象之间的交互活动&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序列图有两个不同于通信图的特征：
&lt;ul&gt;
&lt;li&gt;序列图有对象生命线，表示一个对象在一段时间内存在&lt;/li&gt;
&lt;li&gt;序列图有控制焦点（生命线上的矩形），表示一个对象执行一个动作所经历的时间段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%BA%8F%E5%88%97%E5%9B%BE.png&#34;
	width=&#34;1284&#34;
	height=&#34;824&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%BA%8F%E5%88%97%E5%9B%BE_hu11861659648816942721.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%BA%8F%E5%88%97%E5%9B%BE_hu8073227203007898593.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;373px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;通信图协作图&#34;&gt;通信图（协作图）
&lt;/h4&gt;&lt;p&gt;通信图强调收发消息的对象的结构组织，&lt;strong&gt;展示对象之间的消息流及其顺序&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信图有两个不同于序列图的特性
&lt;ul&gt;
&lt;li&gt;通信图有路径&lt;/li&gt;
&lt;li&gt;通信图有顺序号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E9%80%9A%E4%BF%A1%E5%9B%BE.png&#34;
	width=&#34;1466&#34;
	height=&#34;540&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E9%80%9A%E4%BF%A1%E5%9B%BE_hu14047803098663100087.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E9%80%9A%E4%BF%A1%E5%9B%BE_hu11792393454046626026.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;271&#34;
		data-flex-basis=&#34;651px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;序列图和通信图是同构的，它们之间可以相互转换。&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;状态图&#34;&gt;状态图
&lt;/h4&gt;&lt;p&gt;状态图展现了一个状态机，它由状态、转换、事件、活动组成，强调对象（单个）行为的事件顺序，&lt;strong&gt;通常对反应型对象建模&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;状态图用于&lt;strong&gt;描述一个对象在多个用例中的行为，用于某些具有多个状态的对象而不是系统中大多数或全部对象&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;状态转换图.png&#34; style=&#34;zoom:48%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活动
&lt;ul&gt;
&lt;li&gt;活动表的语法格式：&lt;code&gt;事件名（参数表）/动作表达式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;活动表.png&#34; style=&#34;zoom:38%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事件
&lt;ul&gt;
&lt;li&gt;事件表达式语法格式：&lt;code&gt;事件说明[监护条件]/动作表达式&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;转换（迁移）
&lt;ul&gt;
&lt;li&gt;转换可以包含事件触发器、监护条件、状态（两个）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;状态图可以没有终止状态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转换包括两个状态（源状态，目标状态）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事件触发转移（迁移）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;活动（动作）可以在状态内执行，也可以在状态转换（迁移）时执行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%8A%B6%E6%80%81%E5%9B%BE.png&#34;
	width=&#34;1764&#34;
	height=&#34;780&#34;
	srcset=&#34;https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%8A%B6%E6%80%81%E5%9B%BE_hu2331306147413038689.png 480w, https://loml717.github.io/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%8A%B6%E6%80%81%E5%9B%BE_hu4812544430207869862.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;542px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;组合状态也称超状态，嵌套状态也称子状态&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;活动图&#34;&gt;活动图
&lt;/h4&gt;&lt;p&gt;活动图是一种特殊的状态图，它&lt;strong&gt;展现了在系统内从一个活动到另一个活动的流程&lt;/strong&gt;。&lt;/p&gt;
&lt;img src=&#34;活动图.png&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;h4 id=&#34;构件图&#34;&gt;构件图
&lt;/h4&gt;&lt;p&gt;构件图&lt;strong&gt;展现了一组构件之间的组织和依赖&lt;/strong&gt;。通常把构件映射为一个或多个类、接口或协作。&lt;/p&gt;
&lt;img src=&#34;构件图.png&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;h4 id=&#34;部署图&#34;&gt;部署图
&lt;/h4&gt;&lt;p&gt;部署图是用来对面向对象系统的物理方面建模的方法，&lt;strong&gt;展现了系统的软件和硬件之间的关系&lt;/strong&gt;，在实施阶段使用。&lt;/p&gt;
&lt;img src=&#34;部署图.png&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;hr&gt;
&lt;h2 id=&#34;软件工程&#34;&gt;软件工程
&lt;/h2&gt;&lt;h3 id=&#34;软件过程&#34;&gt;软件过程
&lt;/h3&gt;&lt;h4 id=&#34;能力成熟度模型cmm&#34;&gt;能力成熟度模型（CMM）
&lt;/h4&gt;&lt;p&gt;CMM 将软件过程改进分为以下 5 个成熟度级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始级
&lt;ul&gt;
&lt;li&gt;软件过程的特定是&lt;strong&gt;杂乱无章，有时甚至混乱&lt;/strong&gt;，几乎没有明确定义的步骤，项目的成功完全依赖个人努力和英雄式核心人物的作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可重复级
&lt;ul&gt;
&lt;li&gt;建立了&lt;strong&gt;基本的项目管理过程和实践来跟踪项目费用、进度和功能特性&lt;/strong&gt;，有必要的过程准则来重复以前在同类项目中的成功&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;已定义级
&lt;ul&gt;
&lt;li&gt;软件过程文档化、标准化，并综合成整个软件开发组织的标准软件过程。&lt;strong&gt;所有项目都采用根据实际情况修改后得到的标准软件过程来开发和维护软件&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;已管理级
&lt;ul&gt;
&lt;li&gt;制定了软件过程和产品质量的详细度量标准。&lt;strong&gt;软件过程的产品质量都被开发组织的成员所理解和控制&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优化级
&lt;ul&gt;
&lt;li&gt;加强了定量分析，通过来自&lt;strong&gt;过程质量反馈&lt;/strong&gt;和来自&lt;strong&gt;新观念、新技术的反馈&lt;/strong&gt;使过程能&lt;strong&gt;不断持续地改进&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;能力成熟度模型集成cmmi&#34;&gt;能力成熟度模型集成（CMMI）
&lt;/h4&gt;&lt;p&gt;CMMI提供了两种表示方法：阶段式模型和连续式模型&lt;/p&gt;
&lt;p&gt;1）阶段式模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始的：过程不可预测且缺乏控制&lt;/li&gt;
&lt;li&gt;已管理的：过程为项目服务&lt;/li&gt;
&lt;li&gt;已定义的：过程为组织服务&lt;/li&gt;
&lt;li&gt;定量管理的：过程已度量和控制&lt;/li&gt;
&lt;li&gt;优化的：集中于过程改进&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2）连续式模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CL0（未完成的）
&lt;ul&gt;
&lt;li&gt;过程域&lt;strong&gt;未执行或未得到&lt;/strong&gt; CL1 中定义的所有目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CL1（已执行的）
&lt;ul&gt;
&lt;li&gt;其共性目标是过程&lt;strong&gt;将可标识的输入工作产品转换成可标识的输出工作产品&lt;/strong&gt;，以实现支持过程域的特定目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CL2（已管理的）
&lt;ul&gt;
&lt;li&gt;其共性目标&lt;strong&gt;集中于已管理的过程的制度化&lt;/strong&gt;。根据组织级政策规定过程的运行将使用哪个过程，项目遵循已文档化的计划和过程描述，所有正在工作的人都有权使用足够的资源，所有工作任务和工作产品都被监控、控制和评审。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CL3（已定义级的）
&lt;ul&gt;
&lt;li&gt;其共性目标&lt;strong&gt;集中于已定义的过程的制度化&lt;/strong&gt;。过程是按照组织的剪裁指南从组织的标准过程集中剪裁得到的，还必须收集过程资产和过程的度量，并用于将来对过程的改进。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CL4（定量管理的）
&lt;ul&gt;
&lt;li&gt;其共性目标&lt;strong&gt;集中于可定量管理的过程的制度化&lt;/strong&gt;。使用测量和质量保证来控制和改进过程域，建立和使用关于质量和过程执行的定量目标作为管理准则。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CL5（优化的）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用量化（统计学）手段改变和优化过程域&lt;/strong&gt;，以满足客户要求的改变和持续改进计划中的过程域的功效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件过程模型&#34;&gt;软件过程模型
&lt;/h3&gt;&lt;p&gt;软件过程模型也称为软件开发模型，它是软件开发全部过程、活动和任务的结构框架。&lt;/p&gt;
&lt;h4 id=&#34;瀑布模型&#34;&gt;瀑布模型
&lt;/h4&gt;&lt;p&gt;只适用于需求明确或者二次开发（需求稳定）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;容易理解，管理成本低&lt;/li&gt;
&lt;li&gt;强调开发的阶段性早期计划及需求调查和产品测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;客户必须能够完整、正确、清晰的表达他们的需要&lt;/li&gt;
&lt;li&gt;难以评估进度状态&lt;/li&gt;
&lt;li&gt;接近项目结束时，出现大量的集成和测试工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;瀑布模型.png&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;v模型&#34;&gt;V模型
&lt;/h4&gt;&lt;p&gt;特点是增加了多轮测试。&lt;/p&gt;
&lt;img src=&#34;V模型.png&#34; style=&#34;zoom: 40%;&#34; /&gt;
&lt;h4 id=&#34;增量模型&#34;&gt;增量模型
&lt;/h4&gt;&lt;p&gt;优先级最高的服务最先交付，但由于并不是从系统整体角度规划各个模块，因此不利于模块划分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;瀑布模型的优点&lt;/li&gt;
&lt;li&gt;第一个可交付版本所需成本和时间很少&lt;/li&gt;
&lt;li&gt;开发承担的风险不大&lt;/li&gt;
&lt;li&gt;可减少用户需求的变更&lt;/li&gt;
&lt;li&gt;运行增量投资&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;初始增量可能会造成后来增量的不稳定&lt;/li&gt;
&lt;li&gt;需求不稳定，可能导致一些增量需重新开发&lt;/li&gt;
&lt;li&gt;管理发生的成本、进度和配置的复杂性可能会超出组织的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;增量模型.png&#34; style=&#34;zoom:47%;&#34; /&gt;
&lt;h4 id=&#34;演化模型&#34;&gt;演化模型
&lt;/h4&gt;&lt;p&gt;演化模型是迭代的过程模型，使得软件开发人员能够逐步开发出更完整的软件版本。演化模型特别适用于对软件需求缺乏准确认识的情况。&lt;/p&gt;
&lt;h5 id=&#34;原型模型&#34;&gt;原型模型
&lt;/h5&gt;&lt;p&gt;原型方法比较适合于用户需求不清、需求经常变化的情况。当系统规模不是很大也不太复杂时，采用该方法比较好。&lt;/p&gt;
&lt;img src=&#34;原型模型.png&#34; style=&#34;zoom:60%;&#34; /&gt;
&lt;h5 id=&#34;螺旋模型&#34;&gt;螺旋模型
&lt;/h5&gt;&lt;p&gt;螺旋模型将瀑布模型和演化模型结合起来，加入了风险分析。适用于庞大、复杂且具有高风险的系统。&lt;/p&gt;
&lt;img src=&#34;螺旋模型.png&#34; style=&#34;zoom:48%;&#34; /&gt;
&lt;h4 id=&#34;喷泉模型&#34;&gt;喷泉模型
&lt;/h4&gt;&lt;p&gt;喷泉模型是一种以用户需求为动力，以对象作为驱动的模型，适合于面向对象的开发方法。&lt;/p&gt;
&lt;p&gt;喷泉模型克服了瀑布模型不支持软件重用和多项开发活动集成的局限性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;各个阶段没有明显界线，开发人员可以同步进行，提高软件项目的开发效率，节省开发时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;由于各个开发阶段是重叠的，在开发过程中需要大量的开发人员，不利于项目的管理&lt;/li&gt;
&lt;li&gt;这种模型要求严格管理文档，使得审核难度加大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;喷泉模型.png&#34; style=&#34;zoom:48%;&#34; /&gt;
&lt;h4 id=&#34;统一过程模型up&#34;&gt;统一过程模型（UP）
&lt;/h4&gt;&lt;p&gt;统一过程定义了 4 个技术阶段及其制品&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起始阶段：生命周期目标
&lt;ul&gt;
&lt;li&gt;专注于项目的初创活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;精化阶段：生命周期架构
&lt;ul&gt;
&lt;li&gt;理解了最初的领域范围之后进行需求分析和架构演进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构件阶段：初始运作功能
&lt;ul&gt;
&lt;li&gt;关注系统的构建，产生实现模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移交阶段：产品发布
&lt;ul&gt;
&lt;li&gt;关注于软件提交方面的工作，产生软件增量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;敏捷方法&#34;&gt;敏捷方法
&lt;/h3&gt;&lt;h4 id=&#34;极限编程xp&#34;&gt;极限编程（XP）
&lt;/h4&gt;&lt;p&gt;极限编程由价值观、原则、实践、行为 4 个部分组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 大价值观
&lt;ul&gt;
&lt;li&gt;沟通、简单性、反馈、勇气&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5 个原则
&lt;ul&gt;
&lt;li&gt;快速反馈、简单性假设、逐步修改、提倡更改、优质工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;12 个最佳实践
&lt;ul&gt;
&lt;li&gt;计划游戏（快速制定计划、随着细节不断变化而完善）、小型发布、隐喻（找到合适的比喻传达信息）、简单设计、测试先行、重构、结对编程、集体代码所有制、持续集成、每周工作 40 小时、现场客户、编码标准&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;水晶法&#34;&gt;水晶法
&lt;/h4&gt;&lt;p&gt;水晶法认为每一个不同的项目都需要一套不同的策略、约定和方法论&lt;/p&gt;
&lt;h4 id=&#34;并列争求法&#34;&gt;并列争求法
&lt;/h4&gt;&lt;p&gt;并列争求法使用迭代的方法，其中，把每 30 天一次的迭代称为一个“冲刺”&lt;/p&gt;
&lt;h4 id=&#34;自适应软件开发asd&#34;&gt;自适应软件开发（ASD）
&lt;/h4&gt;&lt;p&gt;ASD 有 6 个基本的原则&lt;/p&gt;
&lt;h4 id=&#34;敏捷统一过程aup&#34;&gt;敏捷统一过程（AUP）
&lt;/h4&gt;&lt;p&gt;敏捷统一过程采用“在大型上连续”以及“在小型上迭代”的原理来构建软件系统。&lt;/p&gt;
&lt;p&gt;每个 AUP 迭代执行以下活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建模&lt;/li&gt;
&lt;li&gt;实现&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;部署&lt;/li&gt;
&lt;li&gt;配置及项目管理&lt;/li&gt;
&lt;li&gt;环境管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件需求&#34;&gt;软件需求
&lt;/h3&gt;&lt;p&gt;12 种需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能需求
&lt;ul&gt;
&lt;li&gt;考虑系统要做什么，何时做，在何时以及如何修改或升级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能需求
&lt;ul&gt;
&lt;li&gt;考虑软件开发的技术性指标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户或人的因素
&lt;ul&gt;
&lt;li&gt;考虑用户的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;环境需求
&lt;ul&gt;
&lt;li&gt;考虑未来软件应用的环境，包括硬件和软件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;界面需求
&lt;ul&gt;
&lt;li&gt;考虑来自其他系统的输入，到其他系统的输出，对数据格式的特殊规定，对数据存储介质的规定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档需求
&lt;ul&gt;
&lt;li&gt;考虑需要哪些文档，文档针对哪些读者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据需求
&lt;ul&gt;
&lt;li&gt;考虑输入、输出数据的格式，接收、发送数据的频率，数据的准确性和精度、维护所需的人力、支撑软件、开发设备等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;资源使用需求
&lt;ul&gt;
&lt;li&gt;考虑软件运行时所需要的数据、其他软件、内存空间等资源；软件开发、维护所需的人力、支撑软件、开发设备等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全保密要求
&lt;ul&gt;
&lt;li&gt;考虑是否需要对访问系统或系统信息加以控制，隔离用户数据的方法，用户程序如何与其他程序和操作系统隔离以及系统备份的要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠性要求
&lt;ul&gt;
&lt;li&gt;考虑系统的可靠性要求，系统是否必须检测和隔离错误；出错后，重启系统允许的时间等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件成本消耗与开发进度需求
&lt;ul&gt;
&lt;li&gt;考虑是否有规定的时间表，软/硬件投资有无限制等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他非功能性要求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统设计&#34;&gt;系统设计
&lt;/h3&gt;&lt;h4 id=&#34;概要设计&#34;&gt;概要设计
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;设计软件系统总体结构
&lt;ul&gt;
&lt;li&gt;将一个复杂的系统按功能划分成模块&lt;/li&gt;
&lt;li&gt;确定每个模块的功能&lt;/li&gt;
&lt;li&gt;确定模块之间的调用关系&lt;/li&gt;
&lt;li&gt;确定模块之间的接口，即模块之间传递的信息&lt;/li&gt;
&lt;li&gt;评价模块结构的质量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据结构及数据库设计&lt;/li&gt;
&lt;li&gt;编写概要设计文档&lt;/li&gt;
&lt;li&gt;评审&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;详细设计&#34;&gt;详细设计
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对每个模块进行详细的算法设计，用某种图形、表格和语言等工具将每个模块处理过程的详细算法描述出来&lt;/li&gt;
&lt;li&gt;对模块内的数据结构进行设计&lt;/li&gt;
&lt;li&gt;对数据库进行物理设计&lt;/li&gt;
&lt;li&gt;其他设计&lt;/li&gt;
&lt;li&gt;编写详细设计说明书&lt;/li&gt;
&lt;li&gt;评审&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统测试&#34;&gt;系统测试
&lt;/h3&gt;</description>
        </item>
        
    </channel>
</rss>
