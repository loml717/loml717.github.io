[{"content":"Linux网络命令与协议 ","date":"2024-10-07T16:38:15+08:00","permalink":"https://loml717.github.io/p/linux%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E4%B8%8E%E5%8D%8F%E8%AE%AE/","title":"Linux网络命令与协议"},{"content":"Git使用教程 初始化配值 安装 官网上点击下载即可，除安装位置外，只需点击下一步。。。 初始化配置 配置用户名和邮箱 git config --global user.name \u0026quot;loml717\u0026quot; git config --global user.email loml717@learn.com，用于标识提交内容的身份是谁 省略（Local）：本地配置，只对本地仓库有效 \u0026ndash;global：全局配置，所有仓库生效 \u0026ndash;system：系统配置，对本电脑所有用户生效 保存用户名和密码 git config --global credential.helper store 查看 Git 配置信息 git config --global --list 新建版本库 创建仓库的两种方式：\n本地创建仓库：git init\n通过添加参数，如 git init my-repo 则会创建一个名为 my-repo 的仓库\n通过 git init 初始化本地仓库后，git 会在当前文件夹下创建 .git 文件夹，用于保存该文件夹的仓库信息，并表明该文件夹为一个仓库。删除 .git 文件夹，则表明该文件夹不是仓库。\n从远程服务器克隆一个仓库：git clone\ngit clone \u0026lt;远程仓库地址\u0026gt; 即可将远程仓库创建至本地 Git的工作区域和文件状态 Git 的数据管理可分为三个区域：\n工作区：实际操作的目录，.git 所在的目录 暂存区：临时存放即将提交的修改内容 本地仓库：Git 存储代码的版本信息的主要位置 Git 文件中的几种状态：\n未跟踪：新创建的尚未被 git 管理 未修改：被 git 管理，但内容没有变化 已修改：修改了，尚未添加至暂存区 已暂存：修改后添加到暂存区 Git 基本使用语法 git status 查看仓库的状态\n参数：\n-s：表示简略模式显示仓库状态， Untracked files：文件为跟踪，表示文件处于工作区\ngit add 将文件添加到暂存区\n文件显示为绿色时，代表文件存放在暂存区\n注意！！！ 使用 git rm --cache \u0026lt;file\u0026gt; 可以将文件从暂存区撤回工作区\ngit commit 提交文件到仓库中（将暂存区中的文件提交到仓库中）\n-m 参数：该参数用于描述提交的信息。建议每次提交都带上，否则会强制进入文本输入（eg：vim）要求你输入信息\n**小技巧：**使用 git -a -m \u0026quot;\u0026quot; 可以同时完成提交和暂存两个动作\ngit log 用于查看提交记录\n使用参数 git log --oneline 仅显示提交的 ID 和提交信息\n回退版本 git reset \u0026ndash;soft 回退到某一个版本，并且保留工作区和暂存区的所有修改内容\ngit reset \u0026ndash;hard 回退到某一个版本，并且丢弃工作区和暂存区的所有修改内容\ngit reset \u0026ndash;mixed 默认参数\n回退到某一个版本，保存工作区的修改内容，丢弃暂存区的修改内容\ngit reflog 查看操作的历史记录，可借助操作的历史记录和 git reset --hard 回溯到之前某一个误操作的命令之前\n查看差异 git diff 用于查看工作区、暂存区、本地仓库之间的差异，也可用于查看文件在两个特定版本或分支之间的差异\n不加参数\n默认比较工作区和暂存区之间的差异，显示发生更改的文件以及更改的详细信息\nHEAD 参数：\n比较工作区和版本库之间的内容\n\u0026ndash;cached 参数：\n比较暂存区和版本库之间的内容\n结果同上图\ngit diff \u0026lt;版本提交 ID1\u0026gt; \u0026lt;版本提交 ID2\u0026gt; [指定文件名称]\n比较（可指定）文件两次不同版本之间的差异\n补充：HEAD 可用于表示当前分支的最新提交，HEAD~ 或 HEAD^ 可用于表示上一次提交，加数字可表示多个之前的版本（eg: HEAD~2 表示当前版本的前两个版本）\n删除文件 两种方式：\n借助 git 更新版本达到删除文件的目的 从工作区删除文件（即删除本地文件） 从暂存区删除文件（使用 git add . 更新工作区文件到暂存区） 从本地仓库删除文件（使用 git commit 更新暂存区到本地仓库中） 从而达到删除文件的目的 使用 git rm 命令 该命令会同时删除工作区和暂存区中的文件，但本地仓库中任然存在该文件，需重新提交从而从本地仓库中删除文件。\n参数：\ngit rm \u0026lt;file\u0026gt; 把文件从工作区和暂存区同时删除 git rm --cached \u0026lt;file\u0026gt; 把文件从暂存区中删除，但保留在当前工作区中 git rm -r * 递归删除某个目录下的所有子目录和文件 忽略文件 .gitignore 文件可使该文件夹下的某些文件（为被添加到版本库中的文件）被忽略，不被加入到版本库中。\n应该忽略的文件\n系统或者软件自动生成的文件 编译产生的中间文件和结果文件 运行时生成日志文件、缓存文件、临时文件 涉及身份、密码、口令、密钥等敏感信息文件 文件的匹配规则\n从上到下逐行匹配，一行表示一个忽略模式 空行或 # 开头的行会被忽略 使用标准的 glob 模式匹配 ** 表示匹配任意的中间目录 ! 表示取反，即指定文件一定不会被忽略 远程仓库 远程仓库和本地仓库是相互独立的两个仓库，克隆仓库即指把远程仓库的所有内容复制到本地。\n远程仓库地址的两种方式： HTTPS 每次 push 需验证用户名和密码（不推荐） SSH push 时不需要用户名和密码，但需要在 github 上添加 SSH 公钥配置 配置 SSH 密钥 使用 ssh 方式连接远程仓库，必须配置 ssh 密钥\n！！！建议配置时，上网查阅，此处记录较为简陋\n使用该命令ssh-keygen -t rsa -b 4096 用于生成密钥\n执行后，会生成密钥文件（id_rsa）和公钥文件(id_rsa.pub)，将公钥填入账户配置中即可。(如果指定文件名称，则会生成对应的文件及文件.pub，同时还需再进一步配置)\n克隆仓库 克隆仓库 git clone repo-address 推送更新内容 git push \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt; 拉取更新内容 git pull \u0026lt;remote\u0026gt; 关联本地仓库和远程仓库 建立本地仓库和远程仓库的关联：\n建立连接：git remote add \u0026lt;shortname\u0026gt; \u0026lt;url\u0026gt; 将本地仓库与远程仓库连接起来，其中 shortname 设置远程仓库的别名，url 为远程仓库的地址 查看仓库信息：git remote -v 查看当前仓库所对应的远程仓库的别名和地址 指定本地分支名称：git branch -M main 建立关联分支：git push -u origin main:main 将本地仓库的 main 分支和远程仓库的 main 分支关联起来，若本地与远程分支名相同，建立连接时可省略冒号后面部分 同步远程仓库与本地仓库的内容\ngit pull \u0026lt;远程仓库别名\u0026gt; \u0026lt;远程分支名\u0026gt;:\u0026lt;本地分支名\u0026gt; 将远程仓库文件拉取到本地再合并（可能会因内容冲突而失败） 省略参数默认为 git pull origin main git fetch 与该命令相同，都可以从远程仓库获取修改的内容，但不会自动合并，需手动合并 分支 分支的基本操作 查看当前所有分支：git branch\n创建新分支：git branch \u0026lt;分支名\u0026gt;\n切换不同分支：git checkout \u0026lt;分支名\u0026gt;\ngit checkout 也可用于恢复文件，若出现文件名与分支名相同的情况，则默认为切换分支 git switch \u0026lt;分支名\u0026gt; 专门用于切换分支名 合并分支：git merge \u0026lt;分支名\u0026gt;\n将指定分支合并到当前分支 查看分支图：git log --graph --oneline --decorate --all\n删除分支：git branch -d\n-d：只能删除已经被合并的分支 -D：强制删除分支 解决合并冲突 当两个分支中出现同一份文件的同一行代码出现差异时，就会发生合并冲突\n当发生合并冲突时，需到文件对应位置进行修改再提交\n中断合并：git merge --abort\n回退和rebase 回退分支 回退到某一分支：git checkout -b \u0026lt;分支名\u0026gt; \u0026lt;对应分支ID\u0026gt; rebase变基 git rebase \u0026lt;分支名\u0026gt;\nrebase执行的操作：\nMerge和Rebase merge 优：不会破坏原分支的提交历史，方便回溯和查看 缺：产生额外提交节点，分支图比较复杂 rebase 优：不新增额外的提交记录，形成线性历史，直观干净 缺：改变提交历史，改变当前分支 branch out 的节点，避免在共享分支使用 ","date":"2024-09-29T17:15:03+08:00","image":"https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/git_hu15283378056538356560.png","permalink":"https://loml717.github.io/p/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","title":"Git使用教程"},{"content":"通过regedit使win10任务栏透明 通过 win + R 输入 regedit 打开注册表\n定位到目录计算机\\HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\n右侧空白处右键，新建→DWORD (32位) 值，并将其重命名为 TaskbarAcrylicOpacity\n双击文件，选择十进制，调整数据数值，0为完全透明，10为完全不透明，点击确定即可\n效果\n建议！（效果应该会更好点）\n将颜色选择为自定义，并修改为如下：\n","date":"2024-09-28T10:23:47+08:00","image":"https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/5_hu20553926082269395.png","permalink":"https://loml717.github.io/p/win10%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%80%8F%E6%98%8E/","title":"Win10任务栏透明"}]